#created on: Sep 1, 2010
package org.ihtsdo.arena.drools

#list any import classes here.
import java.util.Collection;

import org.ihtsdo.concept.Concept;

import org.ihtsdo.tk.api.concept.ConceptVersionBI;
import org.ihtsdo.tk.api.description.DescriptionVersionBI;
import org.ihtsdo.tk.api.relationship.RelationshipVersionBI;
import org.ihtsdo.tk.api.relationship.group.RelGroupVersionBI;

import org.ihtsdo.arena.context.action.AddFromSpecAction;
import org.ihtsdo.arena.context.action.CloneAction;
import org.ihtsdo.arena.context.action.CreateRelAction;
import org.ihtsdo.arena.context.action.CloneAndRetireAction;
import org.ihtsdo.arena.context.action.RetireAction;

import org.ihtsdo.tk.drools.facts.ComponentFact;
import org.ihtsdo.tk.drools.facts.ConAttrFact;
import org.ihtsdo.tk.drools.facts.ConceptFact;
import org.ihtsdo.tk.drools.facts.Context;
import org.ihtsdo.tk.drools.facts.DescFact;
import org.ihtsdo.tk.drools.facts.DescSpecFact;
import org.ihtsdo.tk.drools.facts.RelFact;
import org.ihtsdo.tk.drools.facts.RelSpecFact;

import org.ihtsdo.tk.spec.DescriptionSpec;

import org.ihtsdo.tk.example.binding.Snomed;
import org.ihtsdo.tk.example.binding.SnomedConstraints;
import org.ihtsdo.tk.example.binding.SnomedRelType;
import org.ihtsdo.tk.example.binding.SnomedRelSpec;
import org.ihtsdo.tk.example.binding.Taxonomies;
import org.ihtsdo.tk.example.binding.TermAux;
import org.ihtsdo.tk.example.binding.WbDescType;



#declare any global variables here

global Collection actions;


rule "rule 1"
	
	when
		(and 
			($dropTarget: ConceptFact(this isKindOf Taxonomies.SNOMED, context == Context.DROP_TARGET))
			($dropObject: ConceptFact(context == Context.DROP_OBJECT, concept != $dropTarget.concept))
		)
	then 
		actions.add(new CreateRelAction("Is-a", $dropTarget, Snomed.IS_A, $dropObject));
end


rule "rule 2"
	
	when
		(and 
			($dropTarget: ConceptFact(this isKindOf Snomed.CLINICAL_FINDING, context == Context.DROP_TARGET))
			($dropObject: ConceptFact(context == Context.DROP_OBJECT, concept != $dropTarget.concept))
		)
	then 
		actions.add(new CreateRelAction("finding-site", $dropTarget, Snomed.FINDING_SITE, $dropObject));
end


rule "rule 3"
	
	when
		(and 
			($dropTarget: ConceptFact(this not isKindOf Taxonomies.SNOMED, context == Context.DROP_TARGET))
			($dropObject: ConceptFact(context == Context.DROP_OBJECT, concept != $dropTarget.concept))
		)
	then 
		actions.add(new CreateRelAction("is-a", $dropTarget, TermAux.IS_A, $dropObject));
end


rule "rule 4"
	
	when
		(and 
			($dropTarget: ComponentFact(context == Context.DROP_TARGET))
			($dropObject: ComponentFact(context == Context.DROP_OBJECT, component == $dropTarget.component))
		)

	then 
		actions.add(new RetireAction("retire", $dropObject));
		actions.add(new CloneAction("clone", $dropObject));
		actions.add(new CloneAndRetireAction("clone & retire", $dropObject));
end

rule "rule 5"
	
	when
		(and 
			($dropTarget: ConceptFact(context == Context.DROP_TARGET))
			($dropObject: DescSpecFact(context == Context.DROP_OBJECT))
		)

	then 
		actions.add(new AddFromSpecAction("add desc", $dropTarget, $dropObject));
end

rule "rule 6"
	
	when
		(and 
			($dropTarget: ConceptFact(context == Context.DROP_TARGET))
			($dropObject: RelSpecFact(context == Context.DROP_OBJECT))
		)

	then 
		actions.add(new AddFromSpecAction("add rel", $dropTarget, $dropObject));
end


