import java.net.SocketPermission;
import java.security.Permission;
import javax.security.auth.login.LoginContext;


import org.dwfa.aa.GeneratorLongVerhoeff;

import net.jini.config.AbstractConfiguration;
import net.jini.core.entry.Entry;
import net.jini.discovery.LookupDiscovery;
import net.jini.id.Uuid;
import net.jini.id.UuidFactory;
import net.jini.lookup.entry.Name;
import net.jini.lookup.ServiceDiscoveryManager;
import net.jini.security.BasicProxyPreparer;

org.dwfa.aa.AssignmentAuthorityService {
    exporter = new net.jini.jeri.BasicJeriExporter(net.jini.jeri.tcp.TcpServerEndpoint.getInstance(0), new net.jini.jeri.BasicILFactory());
    initialLookupGroups = new String[] { "org.dwfa.discovery" };
    generator = new GeneratorLongVerhoeff(1, UuidFactory.generate(), "long sequence with Verhoeff check digit");
    entries = new Entry[] { new Name("UniqueConfig long sequence with Verhoeff check digit") };
    
    /* Public Key Certificates */
    private static users = 
        KeyStores.getKeyStore("file:prebuiltkeys/truststore", null);

    private static reggie = 
	KeyStores.getX500Principal("reggie", users);
    private static server = 
	KeyStores.getX500Principal("server", users);

    private static reggieUser = Collections.singleton(
	KeyStores.getX500Principal("reggie", users));
    private static serverUser = Collections.singleton(
	KeyStores.getX500Principal("server", users));

    /* Exporter for the server proxy */
    exporter =
	/* Use secure exporter */
	new BasicJeriExporter(
	    /* Use SSL transport */
	    SslServerEndpoint.getInstance(0),
	    /* Support ProxyTrust */
	    new ProxyTrustILFactory(
		/* Require integrity for all methods */
		new BasicMethodConstraints(
		    new InvocationConstraints(Integrity.YES, null)),
		/* Require QueueServerPermission */
		QueueServerPermission.class));

    private groups = initialLookupGroups;
    discoveryManager = new LookupDiscovery(groups, this);

}

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    private serviceLookupConstraints = 
	new BasicMethodConstraints( 
	    new InvocationConstraints( 
		new InvocationConstraint[]{ 
		    Integrity.YES,
                    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(
			org.dwfa.aa.AssignmentAuthorityService.reggieUser)
                    },
                null));

    static registrarPreparer = new BasicProxyPreparer(
	true,
        serviceLookupConstraints,
        new Permission[] { 
	    new AuthenticationPermission(
		org.dwfa.aa.AssignmentAuthorityService.serverUser,
		org.dwfa.aa.AssignmentAuthorityService.reggieUser,
		"connect") 
	    });

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the join manager */
net.jini.lookup.JoinManager {

    static registrarPreparer    = 
	net.jini.discovery.LookupDiscovery.registrarPreparer;
    static registrationPreparer = 
	net.jini.discovery.LookupDiscovery.registrarPreparer;
    static serviceLeasePreparer = 
	net.jini.discovery.LookupDiscovery.registrarPreparer;

}//end net.jini.lookup.JoinManager


