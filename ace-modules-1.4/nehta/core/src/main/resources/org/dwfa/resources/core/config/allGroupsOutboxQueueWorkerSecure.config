import net.jini.core.entry.Entry;
import net.jini.id.Uuid;
import net.jini.id.UuidFactory;
import org.dwfa.aa.GeneratorLongVerhoeff;
import net.jini.lookup.entry.Name;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import net.jini.jeri.ssl.*;
import javax.security.auth.login.LoginContext;
import com.sun.jini.config.KeyStores;
import com.sun.security.auth.callback.DialogCallbackHandler;
import java.util.Collections;
import java.security.Permission;
import net.jini.security.*;
import net.jini.discovery.LookupDiscovery;
import net.jini.lookup.ServiceDiscoveryManager;




org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker {
    tranDurLong = new Long(300000);

	mailPop3Host = "216.173.252.70";
	username = "dwa1";


	initialLookupGroups = new String[] { "org.dwfa.discovery" };
	
    loginContext = new LoginContext("org.dwfa.bpa.queue.QueueServer.AllGroupsOutboxQueueWorker");
    								  
    private static users=KeyStores.getKeyStore("file:prebuiltkeys/truststore", null);
    private static clientUser = Collections.singleton(
	KeyStores.getX500Principal("client", users));
    private static reggieUser = Collections.singleton(
	KeyStores.getX500Principal("reggie", users));
    private static serverUser = Collections.singleton(
	KeyStores.getX500Principal("server", users));

    /* Preparer for server proxy */
    static preparer =
	new BasicProxyPreparer(
	    /* Verify the proxy. */
	    true,
	    /*
	     * Require integrity, client authentication, and server
	     * authenticate with the correct principal for all methods.
	     */
	    new BasicMethodConstraints(
		new InvocationConstraints(
		    new InvocationConstraint[] {
			Integrity.YES,
			ClientAuthentication.YES,
			ServerAuthentication.YES,
			new ServerMinPrincipal(serverUser) },
		    null)),
	    new Permission[] {
		/* Authenticate as client when connecting to server */
		new AuthenticationPermission(clientUser,
					     serverUser,
					     "connect") });

    private groups = initialLookupGroups;
    serviceDiscovery = new ServiceDiscoveryManager(
        new LookupDiscovery(groups, this), null, this);

}//end org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker

/* Configuration block for the SDM */
net.jini.lookup.ServiceDiscoveryManager {

    /* Exporter for the SDM */
    eventListenerExporter =
        /* Use secure exporter */
        new BasicJeriExporter(
            /* Use SSL transport */
            SslServerEndpoint.getInstance(0),
            /* Support ProxyTrust */
            new ProxyTrustILFactory(
                /* Require integrity for all methods */
                new BasicMethodConstraints(
                    new InvocationConstraints(Integrity.YES, null)),
                AccessPermission.class),
		false,
		false);

    /* Used by serveral facilities below */
    registrarPreparer = 
        new BasicProxyPreparer(
            /* Verify the proxy. */
            true,
            /*
             * Require integrity, client authentication, and server
             * authenticate with the correct principal for all methods.
             */
            new BasicMethodConstraints(
                new InvocationConstraints(
                    new InvocationConstraint[] {
                        Integrity.YES,
                        ClientAuthentication.YES,
                        ServerAuthentication.YES,
                        new ServerMinPrincipal(
			    org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker.reggieUser) },
                    null)),
            new Permission[] {
                /* Authenticate as client when connecting to reggie */
                new AuthenticationPermission(
			org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker.clientUser,
			org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker.reggieUser,
                    "connect") });

    eventLeasePreparer    = registrarPreparer;

}//end net.jini.lookup.ServiceDiscoveryManager

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    static registrarPreparer = 
	net.jini.lookup.ServiceDiscoveryManager.registrarPreparer;

}//end net.jini.discovery.LookupDiscovery
