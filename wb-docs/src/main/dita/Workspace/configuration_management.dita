<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
  "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">

<topic id="topic3" xml:lang="en">
 <title>Configuration Management—CollabNet Subversion</title>
 <body>
  <section>IHTSDO Workbench depends on CollabNet Subversion for version control and configuration
   management. CollabNet makes Subversion available as a service, enabling globally distributed
   organizations to share version-controlled resources across locations. Ease of use and
   out-of-the-box support for remote teams make Subversion the best solution for global projects,
   compared to legacy tools that are inadequate for distributed teams and too expensive to
   run.</section>
  <section>Subversion was named sole leader in stand-alone SCM by Forrester Research for the reasons
   above, as well as its best of class version control capabilities, low-cost support for
   distributed teams, and enterprise-class scalability. By delivering certified binaries, commonly
   needed add-ons, support, and services, CollabNet Subversion minimizes the risks associated with
   deploying an open source solution in the enterprise.</section>
  <section>Users from remote development sites can access IHTSDO Workbench’s web-accessible central
   Subversion server, and eliminate the need for repository replication, additional local servers,
   and system administrators. Developer productivity is also increased by enabling web-based access
   to a wide range of modern SCM techniques, including trunk-based branching and merging, continuous
   integration, and nonexclusive file locking.</section>
  <fig id="au999657">
   <title>Subversion adoption on public Apache servers</title>
   <image href="../images/Workspace_Images/workspace_img_5.jpg" placement="break" width="380"
    height="236"/>
  </fig>
  <section id="au999665">Subversion continues to be the fastest growing open source application for
   version control - installed on nearly 300,000 public Apache servers as of July 2008 and used by
   well over one million developers.<indexterm>Subversion </indexterm></section>
  <section id="au999680">CollabNet Subversion is an enterprise-ready distribution of Subversion that
   includes certified binaries, platform specific installers, certified plug-ins for other tools,
   and enterprise-ready add-ons.<indexterm>CollabNet </indexterm><indexterm>Subversion
   </indexterm></section>
  <section id="au999695">An overview of CollabNet Subversion 1.5 benefits
    include:<indexterm>CollabNet </indexterm><indexterm>Subversion </indexterm></section>
  <ul>
   <li>State of the art Software Configuration Management</li>
  </ul>
  <p>Applying versioning to files, as well as directories and file meta-data.</p>
  <p>Support branching and tagging operations efficiently and independently of the branch or tag
   size.</p>
  <p>Guaranteeing integrity through true atomic commits-nothing takes effect until the entire commit
   has succeeded</p>
  <p>Handling binary files efficiently.</p>
  <p>Supporting trunk-based branching, continuous integration, and nonexclusive file locking.</p>
  <p>Tightly integrating Subversion with IDEs.</p>
  <ul>
   <li>Centralized repository</li>
  </ul>
  <p>Providing access to repository from any local or global network.</p>
  <p>Facilitating artifact management, traceability of changes, and governance.</p>
  <p>Sharing artifacts between projects, enabling project reuse.</p>
  <section>The following sections describe the benefits of Subversion 1.5 in more detail. </section>
  <section id="au999855">
   <title>Sparse Checkouts</title>
  </section>
  <section>Users can choose to check out only part of the source tree from the repository to use as
   their local working copy. This means that they no longer have to check out all of the files –
   they can check out only what they need.</section>
  <section id="au999881">
   <title>Repository Mirroring</title>
  </section>
  <section>Teams that are geographically dispersed often experience slow response time when hitting
   the central server. In order to improve response time, Subversion allows a local copy, or mirror,
   of the repository that is used for all “read” operations. The repository mirror is kept in sync
   with the central repository. All write operations will still go through to the central server
   using a WebDav write-through proxy.</section>
  <section>This feature provides the benefit of a centralized repository for version control with
   distributed teams, but the benefit of local response times for read operations.</section>
  <section id="au999916">
   <title>Repository Sharing</title>
  </section>
  <section id="au999929">For people using the flat file repository for Subversion, the system will
   automatically limit the number of files kept within a single folder. For example, Subversion can
   now allow 1000 files to be saved in a particular location before creating a new location
   automatically. This “sharding” makes it easier for third-party tools, such as an Explorer type
   program, to find and manage files.<indexterm>Subversion </indexterm></section>
  <section id="au999940">
   <title>Directory Versioning<ph>
     <indexterm>versioning <indexterm>directory</indexterm>
     </indexterm>
    </ph></title>
  </section>
  <section>Directories, renames, and file metadata (but not timestamps) are versioned. Entire
   directory trees can be moved around and/or copied very quickly, and retain full revision
   history.</section>
  <section id="au999962">
   <title>Atomic Commits</title>
  </section>
  <section>This means that Commits are true atomic operations. Interrupted commit operations do not
   cause repository inconsistency or corruption.</section>
  <section id="au999984">
   <title>Global Revision Numbers</title>
  </section>
  <section>Whereas most version control systems assign a separate number to each change to each
   file, each Subversion revision number defines a complete, coherent set of versions of all files
   and directories in the entire repository. This means that every revision number constitutes a
   complete "change set" or "baseline", guaranteeing simple assurance of "which changes go with
   which."</section>
  <section id="au1000008">
   <title>Cheap “branches” and “tags”</title>
  </section>
  <section>Subversion branches, tags, and copies are "cheap" both in the cost to create them, and
   the cost to store them in the repository. Making a tag, branch, or copy costs the same time and
   space regardless of whether it affects one file or ten million--and that cost is very low, around
   a second of time and a few bytes of space. </section>
  <section id="au1000030">This low cost is a dramatic contrast to most other version control
   systems, which can take hours to make these structures. Since all version control systems need
   some sort of lock while doing this, these other systems can cause user operations to fail simply
   because some other user was making a tag; not so in Subversion.<indexterm>version
   </indexterm></section>
  <section id="au1000049">
   <title>Versioned Properties</title>
  </section>
  <section>Subversion itself attaches "properties" to files and directories, such as the fact that a
   file is executable. Subversion also defines other properties that you can set on your files and
   directories, which cause Subversion to treat them specially. For example, the "MIME type" lets
   Subversion clients know whether to display a file using a word processor, a graphic editor, or
   some other tool. </section>
  <section>Subversion allows you to define your own properties, which can mean anything you want,
   typically used in tools you build on top of Subversion. For example, you might define a property
   that connects a particular change to a file with the new test case which was added to verify the
   change. All of these properties are "versioned" along with the files: if the value of the
   property needs to be changed over time (such as the connection to the test case mentioned above),
   this happens automatically.</section>
  <section id="au1000084">
   <title>Locking<ph>
     <indexterm>locking </indexterm>
    </ph></title>
  </section>
  <section>There are really two kinds of locking: "internal locking" used to protect Subversion
   itself (which was mentioned in the above discussion of tags), and "user locking," which is
   implemented and enforced by Subversion, but provided to the users for their own purposes. The
   most common use of locking is to prevent anyone else from making changes to a certain file,
   perhaps because you're planning some big change and don't want to deal with conflicts.</section>
  <section id="au1000107">
   <title>Efficient Delta Handling</title>
  </section>
  <section>"Deltas" are the result of comparing a version of a file to the previous version--just
   the changes this time around. They're used pervasively throughout Subversion, saving disk
   storage, saving network bandwidth, and helping to manage multiple changes to the same file (if
   one delta is on line 10, and another is on line 100, we know they don't interfere with each
   other). </section>
  <section>Subversion's deltas are unusually "efficient" in several ways:</section>
  <p>Since they're used everywhere, they actually have to be computed less often than in many
   systems</p>
  <p>They're used with binary files as well as text files (unlike many version control systems),
   which is all the more important since binary files tend to be much larger than text files</p>
  <p>Perhaps most importantly, Subversion uses deltas in both directions, whereas most version
   control systems can use them from the server to the user, but not in the other direction</p>
  <section id="au1000154">
   <title>WAN-Readiness/Offline Operations</title>
  </section>
  <section>There are several aspects to Subversion's WAN-readiness; offline operations are but
   one:</section>
  <p>Subversion's data transfers between client and server (that is, over the WAN) are deltified
   whenever possible</p>
  <p>Subversion's operations are streamed: requests for more data are being sent while the earlier
   requests are still being satisfied, so there are no pauses between chunks</p>
  <section>Subversion ensures that many key common developer operations can be performed "off-line,"
   without any need to contact the server at all:</section>
  <p>Find your changes to your current set of files</p>
  <p>Compare your changed version to the version you got from the server</p>
  <p>Revert your changes back to the server's version</p>
 </body>
</topic>

