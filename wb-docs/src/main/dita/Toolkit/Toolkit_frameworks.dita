<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
  "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">


 <topic id="topic1a" xml:lang="en">
   <title>The Toolkit Fameworks</title>
  <body><p>The IHTSDO Toolkit provides two software frameworks for terminology-focused
    applications: one for build-process automation, and another for interactive development
    environments. These frameworks provide application skeletons that can be customized by an
    application developer to meet the unique needs of their end users. </p>
   <table id="ad1016554">
    <tgroup cols="1">
     <colspec colnum="1" colname="col1" colwidth="333*"/>
     <tbody>
      <row>
       <entry colname="col1">
          Like software libraries, software frameworks aid the developer by providing software
          that solves problems for a given domain, and provides a simple API. However, while a
          library acts like a servant to other programs, a framework reverses the master/servant
          relationship. This reversal, called inversion of control, expresses the essence of
          software frameworks. 
        </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <section><title>Build Process Automation (BPA) framework</title>
    The first framework — the IHTSDO Build Process Automation (BPA) framework — is based on the
    Maven tool for building and managing any Java-based project (The Apache Software Foundation,
    2008). This BPA framework automates a build and management process that encourages use of
    industry best practices. Because of this foundation, the IHTSDO Toolkit:</section>
   <ul>
    <li id="ad999449">Makes the build process automated and easy: The BPA framework pro­vides a
     declarative means for identifying project components, thereby simplifying the build system
     management. This declarative orientation provides the basis for the inversion of control of the
     build process auto­mation framework. By making the build process automated, the build can be
     performed on a variety of continuous integration platforms.<indexterm>BPA framework
     </indexterm></li>
    <li>Provides a uniform build system: The BPA framework allows a project to build using its
     project object model and a set of plugins that are shared by all projects—software and
     terminology alike—providing a uniform build system. Once developers learn how one project
     builds, they auto­matically know how all projects build, saving immense amounts of time when
     trying to navigate many projects.</li>
   </ul>
 
       <lq><i>'At regular intervals, the process of “continuous integration” yields executable releases
         that grow in functionality at every release.  It is through these milestones that
         management can measure progress and quality, and hence anticipate, identify, and then
         actively attack risks on an ongoing basis.'</i>   -Grady Booch</lq>
           <ul>
    <li>Provides quality project information: The BPA framework provides project information reports
     that are in part taken from the project’s declarative definition, and in part generated from
     project sources. For example, the BPA framework can provide: change log documents cre­ated
     directly from source control systems, cross referenced sources, direct and transitive
     dependency reporting, and unit test reports includ­ing coverage. </li>
    <li>Provides guidelines for best practices development: The BPA frame­work aims to gather
     current principles for best practices development, and make it easy to guide a project in that
     direction. For example, specification, execution, and reporting of unit tests are part of the
     normal build cycle. Current unit testing best practices were used as guidelines. The BPA
     framework also assists in project workflow such as release management and issue tracking. </li>
    <li id="ad999502">Allows transparent migration to new features: The BPA framework pro­vides an
     easy way for clients to update their installations so that they can take advantage of any
     changes that been made to the framework itself. Installation of new or updated plugins from
     third parties or the frame­work itself has been made trivial for this reason.<indexterm>BPA
      framework </indexterm></li>
   </ul>
   <table id="ad1016669">
    <tgroup cols="1">
     <colspec colnum="1" colname="col1" colwidth="333*"/>
     <tbody>
      <row>
       <entry colname="col1">
        
         Smart Client applications support work offline and they can be deployed and updated in
          real time over the network from a centralized server.
        
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <section>The IHTSDO BPA framework builds on the Maven foundation by providing
    terminology-specific functions to manage, processes, and report terminology and classification
    data dependencies within JAR files, thereby providing a uniform framework for managing software
    and terminology dependencies. </section>
   <section id="ad999518"><title>Interactive Development with the IHTSDO Workbench</title>
    The second framework — the IHTSDO Workbench Interactive Development<indexterm>interactive development</indexterm>
    Environment (IDE) framework—provides for high-performance end user applications, and uses a Java
    Swing-based framework that is easily extended—and scripted—using plain-old java objects. Both of
    these frameworks depend on lower level frameworks, interfaces, and libraries as shown in Figure
    10, “Dependencies and layers of primary subsystems in the IHTSDO Toolkit”, on page 30.
     <indexterm>IDE framework </indexterm></section>
   <section>Both the BPA based applications and the IDE based applications can be deployed either
    stand alone, or as Smart Clients applications. Smart Client applications can be run from the
    Internet, an Intranet, a network share drive, or on the workstation itself. Smart clients do not
    have the interface limitations of a webpage, and require no installation or worrying about
    having the current version because components can be downloaded automatically as
    needed.</section>
   <section>Smart clients make sense because they enhance productivity as a result of their clear
    speed advantage, a richer, easier-to-use and manipulate interface, and the ability to work
    seamlessly offline, such as on an airplane. Economi­cally, smart clients are no more expensive
    to manage than pure browser applications.</section>
   <fig id="ad999609">
    <title>Dependencies and layers of primary subsystems in the IHTSDO Toolkit</title>
    <image href="../images/Toolkit_Images/toolkit_img_1.jpg" placement="break" />
   </fig>
  </body>
 </topic>
 

