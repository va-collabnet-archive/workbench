<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
"http://docs.oasis-open.org/dita/v1.1/OS/dtd/ditabase.dtd">
<dita>
  <topic id="tk_database" xml:lang="en">
    <title>Embedded Database</title>

    <prolog>
      <metadata>
        <keywords>
          <indexterm>database <indexterm>embedded</indexterm></indexterm>
        </keywords>
      </metadata>
    </prolog>

    <body>
      <section id="ad1000722">The IHTSDO Toolkit provides a high-performance
      embedded database implementation built on top of the Oracle Berkeley DB
      Java Edition. This Version Oriented Database (VODB) forms the primary
      data store for the IHTSDO Workbench IDEs. In addition, the same database
      engine can be used within a J2EE context to service other applications
      such as web-based thin clients for terminology viewing, searching, term
      submission, and lightweight editing activities. <indexterm>Berkeley
      database </indexterm><indexterm>database </indexterm><indexterm>VODB
      </indexterm></section>

      <section>Oracle Berkeley DB Java Edition is an open source, embeddable,
      transactional storage engine written entirely in Java. Oracle Berkeley
      DB Java Edition executes in the address space of the application,
      without the overhead of client/server communication, allowing developers
      to store and retrieve information quickly, simply and reliably. Oracle
      Berkeley DB Java Edition was designed from the ground up in Java. It
      takes full advantage of the Java environment to simplify development and
      deployment. The architecture of Oracle Berkeley DB Java Edition supports
      very high performance and concurrency for both read-intensive and
      write-intensive workloads.</section>

      <section id="ad1000750">Relational databases are the most sophisticated
      tool available to the developer for data storage and analysis. Most
      persisted object data is never analyzed using ad-hoc SQL queries; it is
      usually simply retrieved and reconstituted as Java objects. The overhead
      of using a sophisticated analytical storage engine is wasted on this
      basic task of object retrieval. The full analytical power of the
      relational model is not required to efficiently persist Java objects. In
      many cases, it is unnecessary overhead. In contrast, Berkeley DB Java
      Edition does not have the overhead of an ad-hoc query language like SQL,
      and so does not incur this penalty.<indexterm>Berkeley DB
      </indexterm><indexterm>SQL </indexterm></section>

      <section>The result is faster storage, lower CPU and memory
      requirements, and a more efficient development process. Despite the lack
      of an ad-hoc query language, Berkeley DB Java Edition can access Java
      objects in an ad-hoc manner, and it does provide transactional data
      storage and indexed retrieval, as you would expect from any database.
      The difference is that it does this in a small, efficient, and
      easy-to-manage package.</section>

      <section>Berkeley DB Java Edition architecture is based on a log-based,
      no-overwrite storage system, enabling high concurrency and speed while
      providing ACID transactions and record-level locking. Berkeley DB Java
      Edition efficiently caches most commonly used data in memory, without
      exceeding application-specified limits. In this way Berkeley DB Java
      Edition works with an application to use available JVM resources while
      providing access to very large data sets.</section>

      <section>In addition to supporting embedded applications, the Berkeley
      DB Java Edition fits into the J2EE architecture by implementing three
      key APIs within J2EE. By implementing the Java Transaction API (JTA),
      Berkeley DB Java Edition functions as a managed transactional resource
      within the application server. Berkeley DB Java Edition also implements
      the J2EE Connector Architecture (JCA) to ease integration into
      application servers. Finally, once integrated and performing
      transactional operations, most applications will require some ability to
      manage a service. Berkeley DB Java Edition exports information and
      services using the Java Management Extensions (JMX). In concert JTA, JCA
      and JMX allow Berkeley DB Java Edition to operate to its fullest and in
      a predictable manner in J2EE-based solutions.</section>

      <section id="ad1000798">If an alternative database is desired, such an
      alternative can be easily integrated by implementing the
      Version-Oriented Database Interface shown in <xref format="dita"
      href="Toolkit_frameworks.dita#tk_frameworks/ad999609"
      type="fig"/>.<indexterm>VODB </indexterm></section>
    </body>
  </topic>
</dita>
