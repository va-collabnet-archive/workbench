<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
"http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="tk_lexography" xml:lang="en">
  <title>Lexographic Analysis, Search, and Spelling<ph> <indexterm>spelling
  </indexterm> </ph></title>

  <body>
    <section id="ad1000827">The IHTSDO Workbench IDE Framework depends on a
    combination standard Java functionality (regular expression pattern
    matching and Unicode string representation), and Apache Lucene (Apache
    Software Foundation, 2008), for its lexographic analysis, search, and
    spelling functionality. <indexterm>Unicode </indexterm><indexterm>Apache
    Software Foundation </indexterm></section>

    <section id="ad1000841"><title>Lexographic Analysis</title></section>

    <section>Apache Lucene performs considerable lexographic analysis as part
    of its index generation and query processing functions. These functions
    include extracting words, discarding punctuation, removing accents from
    characters, lowercasing, removing common words, reducing words to a root
    form (stemming), or changing words into the basic form
    (lemmatization).</section>

    <section>The primary goal of this lexographic analysis is for information
    retrieval, not for automated machine translation. Independent of
    translation functions, Lucene can be configured differently for specific
    languages, different specialties, different acronyms, and for different
    abbreviations. Lucene currently offers support for a variety of
    languages.</section>

    <section id="ad1000877">Lucene offers multi-lingual support through its
    plug-in analyzers and stemmers.<fn id="ad1003443"> <xref format="html"
    href="http://snowball.tartarus.org" scope="external">
    <ph>http://snowball.tartarus.org</ph> </xref>/</fn><xref format="dita"
    href="#tk_lexography/ad1003443" scope="local" type="fn"/><indexterm>Lucene
    </indexterm></section>

    <section>Lucene plug-in analyzers and stemmers include:</section>

    <table id="ad1000960">
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="138*"/>

        <colspec colname="col2" colnum="2" colwidth="145*"/>

        <tbody>
          <row>
            <entry colname="col1">English</entry>

            <entry colname="col2">Brazilian<indexterm>Brazilian
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Chinese<indexterm>Chinese
            </indexterm></entry>

            <entry colname="col2">Japanese <indexterm>Japanese
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Korean</entry>

            <entry colname="col2">German</entry>
          </row>

          <row>
            <entry colname="col1">Czech</entry>

            <entry colname="col2">French</entry>
          </row>

          <row>
            <entry colname="col1">Greek<indexterm>Greek </indexterm></entry>

            <entry colname="col2">Russian<indexterm>Russian
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Dutch<indexterm>Dutch </indexterm></entry>

            <entry colname="col2" morerows="1">Compound word Germanic
            languages</entry>
          </row>

          <row>
            <entry colname="col1">Thai</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="ad1001135">In addition, Lucene provides other options for
    stemmers that use the Snowball analyzer. <indexterm>stemmers
    </indexterm><indexterm>Snowball </indexterm> <note>Not to be confused with
    SNOMED, Snowball is a small string processing language designed for
    creating stemming algorithms for use in Information Retrieval.
    ☺</note></section>

    <section>Lucene Romance Languages Snowball stemmers include:</section>

    <table id="ad1001170">
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="153*"/>

        <colspec colname="col2" colnum="2" colwidth="164*"/>

        <tbody>
          <row>
            <entry colname="col1">French<indexterm>French </indexterm></entry>

            <entry colname="col2">Spanish<indexterm>Spanish
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Portuguese</entry>

            <entry colname="col2">Italian<indexterm>Italian
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Romanian</entry>

            <entry colname="col2"/>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>Lucene Germanic Snowball stemmers include:</section>

    <table id="ad1001268">
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="154*"/>

        <colspec colname="col2" colnum="2" colwidth="162*"/>

        <tbody>
          <row>
            <entry colname="col1">German<indexterm>German </indexterm></entry>

            <entry colname="col2">Dutch</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="ad1001304">Lucene Scandinavian Snowball stemmers
    include:<indexterm>Scandinavian </indexterm></section>

    <table id="ad1001327">
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="153*"/>

        <colspec colname="col2" colnum="2" colwidth="162*"/>

        <tbody>
          <row>
            <entry colname="col1">Swedish<indexterm>Swedish
            </indexterm></entry>

            <entry colname="col2">Norwegian<indexterm>Norwegian
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Danish<indexterm>Danish </indexterm></entry>

            <entry colname="col2"/>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>Other Lucene Snowball stemmers include:</section>

    <table id="ad1001405">
      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="153*"/>

        <colspec colname="col2" colnum="2" colwidth="162*"/>

        <tbody>
          <row>
            <entry colname="col1">Russian</entry>

            <entry colname="col2">Finnish<indexterm>Finnish
            </indexterm></entry>
          </row>

          <row>
            <entry colname="col1">Hungarian<indexterm>Hungarian
            </indexterm></entry>

            <entry colname="col2">Turkish<indexterm>Turkish
            </indexterm></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="ad1001473"><title>Search</title></section>

    <section>The IHTSDO Workbench IDE Framework provides three underlying
    search technologies that end users can select from.</section>

    <section>The first technology is based upon Apache Lucene and provides a
    high performance—and indexed—search engine that uses a variety of lexical
    and morphological methods to provide rapid and effective search over
    language.</section>

    <section>The second technology is based on Regular Expression pattern
    matching, and provides for unindexed pattern matching by iterating over
    all the descriptions in the database.</section>

    <section>The third technology is a filtering capability that can be
    applied to the results of Lucene or Regular Expression queries, or can be
    applied directly to the database as independent queries.</section>

    <section><title>Search by Lucene</title><indexterm>search <indexterm>by
    Lucene</indexterm> </indexterm></section>

    <p>Lucene is a high performance, scalable, information retrieval library
    (Gospodneti &amp; Hatcher, 2005). Lucene can index and make searchable any
    data that can be converted to a textual format. Lucene does not care about
    the source of the data, its format, or even its language—as long as it
    converts to text.</p>

    <p>Lucene enables IHTSDO Workbench IDEs to provide full text search
    capabilities that many databases don’t provide.</p>

    <p>Lucene provides “sounds like” query capabilities through use of a
    plugin that implements the Metaphone<fn id="ad1003462"> Metaphone is a
    phonetic algorithm, an algorithm for indexing words by their sound, when
    pronounced in English. The algorithm produces variable length keys as its
    output, as opposed to Soundex's fixed-length keys. Similar sounding words
    share the same keys. Metaphone was developed by Lawrence Philips as a
    response to deficiencies in the Soundex algorithm. It is more accurate
    than Soundex because it uses a larger set of rules for English
    pronunciation.</fn><xref format="dita" href="#tk_lexography/ad1003462"
    scope="local" type="fn"/> text analyzer algorithm. Lucene supports other
    plugin text analyzers and algorithms that can be used for other “sounds
    like” functionality in languages other than English. Alternatively, it may
    be of equivalent benefit to rely on inexact query methods that are not
    quite so language specific.</p>

    <p>Lucene provides for other inexact query methods that allow for
    retrieval in circumstances when the spelling of a word is uncertain. One
    is through use of the Levenshtein distance algorithm<fn id="ad1003484">
    The Levenshtein distance is a metric for measuring the amount of
    difference between two sequences. The minimum number of operations needed
    to transform one string into the other, where an operation is an
    insertion, deletion, or substitution of a single character, gives the
    Levenshtein distance between two strings.</fn><xref format="dita"
    href="#tk_lexography/ad1003484" scope="local" type="fn"/>during query
    formulation, which then enables searching the index for terms
    morphologically similar to the words of questionable spelling.</p>

    <p>This use of an inexact query is automatic whenever a user puts a ‘~’ at
    the end of a questionable word—the user does not have to select the
    correct spelling from a provided list for the query to proceed. Instead a
    ranked list of matches to the inexact query is returned.</p>

    <p>Lucene provides for Boolean queries using exact term or phrase
    matching, term distance criterion (how close two terms are to each other),
    similarity criterion, and wildcard criterion.</p>

    <p>The Lucene searching capabilities in the IHTSDO Workbench IDE Framework
    provide simple to use yet powerful functionality for novice and advanced
    users.</p>

    <section><title>Search by Regular Expressions</title></section>

    <p>Regular expressions are a way to describe a set of strings based on
    common characteristics shared by each string in the set. They can be used
    to search, edit, or manipulate text and data.</p>

    <p>The following examples illustrate a few specifications that could be
    expressed in a regular expression:</p>

    <p>The sequence of characters "car" in any context, such as "car",
    "cartoon", or "bicarbonate"</p>

    <p>The word "car" when it appears as an isolated word</p>

    <p>The word "car" when preceded by the word "blue" or "red"</p>

    <p>A dollar sign immediately followed by one or more digits, and then
    optionally a period and exactly two more digits</p>

    <section>The regular pattern matching capability in the IHTSDO Workbench
    IDE Framework provides detailed pattern matching capability for
    intermediate and advanced users.</section>

    <section><title>Semantic Search</title></section>

    <section><ph><indexterm>search <indexterm>semantic</indexterm>
    </indexterm><indexterm>semantic search </indexterm></ph>Semantic search in
    the IHTSDO Workbench IDE Framework is implemented by an easily extended
    set of filters. These filters have complete access to the terminology
    database, and therefore can use any data in the terminology database as
    part of the filter criterion. Filters are based on edit date, status,
    parents, edit paths, and classification results-- and more are
    possible.</section>

    <section>Filters can be applied against the entire database (find all
    concepts with a “finding site” of “cornea”), or can be applied to the
    results of a Lucene or regular expression search (find all concepts that
    contain “corneal” and something like “abrazion”, but that does not have a
    “finding site” of “cornea”).</section>

    <p/>

    <fig id="ad1007445">
      <title>Example Lucene and semantic search showing spelling correction of
      uncertain word in query combined with semantic filters checking the
      status and hierarchy of returned concepts.</title>

      <image align="center" href="../images/Toolkit_Images/toolkit_img_6.jpg"
             placement="break"/>
    </fig>

    <section>Each of the semantic search filters allow the user to specify if
    they should include or exclude concepts that match the filter in the
    search results. Filters can be used multiple times in any order as shown
    in <xref format="dita" href="#tk_lexography/ad1007445"
    type="fig"/>.</section>

    <section>Currently, there are four semantic search functions that are
    meeting known current end-user requirements.</section>

    <section><title>Taxonomy Filter</title><indexterm>filter
    <indexterm>taxonomy</indexterm> </indexterm></section>

    <p>The taxonomy filter tests for membership within a specified
    taxonomy.</p>

    <section><title>Relationship Kind Filter</title><indexterm>filter
    <indexterm>relationship type</indexterm> </indexterm></section>

    <p>The relationship kind filter can test for:</p>

    <p><ul id="ul_bd40975b-553d-4756-932c-c6e32211bb85">
        <li>The presence of a particular relationship type.</li>

        <li>The presence of a relationship type that subsumes a particular
        relationship type.</li>

        <li>The presence of a particular relationship type with a particular
        destination concept type.</li>

        <li>The presence of a relationship type that subsumes a particular
        relationship type and a destination concept that subsumes another
        particular concept.</li>

        <li>The presence of any relationship with a destination concept that
        subsumes any particular concept.</li>

        <li>The presence of any relationship with a particular destination
        concept.</li>
      </ul></p>

    <p/>

    <section><title>Refset Filter</title><indexterm>filter
    <indexterm>refset</indexterm> </indexterm></section>

    <p>The Refset filter tests for membership within a specified taxonomy.</p>

    <section><title>Status Filter</title><indexterm>filter
    <indexterm>status</indexterm> </indexterm> <p>The status filter checks for
    the presence of a particular status type on the concept of interest.
    </p></section>

    <section id="ad1001863"><title>Spelling</title><ph> <indexterm>spelling
    </indexterm> </ph></section>

    <section>Lucene provides a spelling checker to suggest a list of words
    similar to a misspelled word. This spelling checker uses a combination of
    Levenshtein distance and letter n-grams to suggest spelling
    alternatives.</section>

    <section>The spelling checker is not currently integrated into the
    interface. We plan to initially make it available as a “data check” that
    will be applied as new descriptions are created, and applied again prior
    to commit, giving the user an opportunity to correct any errors.</section>
  </body>
</topic>
