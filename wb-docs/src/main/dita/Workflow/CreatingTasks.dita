<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
  "http://docs.oasis-open.org/dita/v1.1/OS/dtd/ditabase.dtd">
<dita>
<!-- generated by DCL filter dwhtm, Ver 3.3 m206 h286 -->

<topic id="topic1" xml:lang="en">
<title>Creating new tasks</title>
<body>
<section>The IHTSDO Workbench Editor's functionality can be extended through
building business processes based on predefined tasks. Although there
are over two hundred separate tasks already available as components for
a busi­ness process, there may well be a requirement for a developer
to create or modify one or more  tasks for building any given business
process . This chapter gives guidance on how to accomplish this. </section>
</body>
</topic>

<topic id="topic2" xml:lang="en">
<title>Example Task Extensions</title>
<body>
<section>There are several simple tasks that can be used as the basis of extending
the workflow environment by adding your own tasks. Here are some:</section>
<section>   1. au.com.ncch.bpa.tasks.web.FetchFromWeb A task that reads
a string from a URL, parses the string, and presents the string to the
user in a dialog. This task demonstrates how tasks can connecting to
servers over the net­work, and do something with those results.</section>
<section>   2. org.dwfa.bpa.tasks.dialog.ShowInfoDialog A task that displays
a mes­sage to the user. The message was set when the process was created
in the process builder, using standard JavaBeans property editor conventions.</section>
</body>
</topic>

<topic id="topic3" xml:lang="en">
<title>Steps to Create A Task</title>
<body>
<section>There are three steps to creating a task:</section>
<section>   1. <ph>Create the task class</ph> by extending org.dwfa.bpa.tasks.AbstractTask.
Put the code to execute the tasks desired action in the evaluate method
of your class. Pattern your class after one of the existing example tasks,
then add new functionality as desired. The <ph>org.dwfa.bpa.tasks.web.Fetch­FromWeb</ph>
task and the <ph>org.dwfa.bpa.tasks.dialog.ShowInfoDia­log</ph> tasks
provide simple examples.</section>
<section>   2. <ph>Create a </ph><ph>BeanInfo</ph><fn id="av1057301"> see
<xref
 href="http://java.sun.com/j2se/1.5.0/docs/api/java/beans/BeanInfo.html"
scope="external" format="html"><ph>http://java.sun.com/j2se/1.5.0/docs/api/java/beans/BeanInfo.html</ph></xref></fn><xref
href="#topic3/av1057301" scope="local" type="fn" format="dita"></xref><ph>
class</ph> for your task. This BeanInfo class controls how the task is
presented in the process builder, and how its properties are edited within
the process builder. More information about how to program the BeanInfo
class can be found at <ph>here</ph>. Your BeanInfo class must be named
following standard conventions where the first part of the name is identical
to the name of your task class, followed by "<ph>BeanInfo</ph>". Your
BeanInfo class must be in the same package as your task class.</section>
<section>   3. <ph>Add an entry to the </ph><ph>pom.xml</ph> to write
the task to disk as a JavaBean, and include this task in the <ph>ed-sct-bundle</ph>
application bundle so it can be accessed from the process builder. The
generation of JavaBeans during the Maven build process is managed by
the <ph>dwfa-maven-plugin</ph> module. The syntax for including a new
JavaBean specification for this plugin is to add a beanSpec entry such
as this entry for the FetchFromWeb task:</section>
<p>  &lt;plugin&gt;</p>
<p>    &lt;groupId&gt;org.dwfa.maven&lt;/groupId&gt;</p>
<p>    &lt;artifactId&gt;dwfa-maven-plugin&lt;/artifactId&gt;</p>
<p>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  <i>[change as neces­sary]</i></p>
<p>    &lt;configuration&gt;</p>
<p>      &lt;specs&gt;</p>
<p>        &lt;beanSpec&gt;</p>
<p>          &lt;sourceName&gt;org.dwfa.bpa.tasks.web.FetchFrom­Web&lt;/sourceName&gt;</p>
<p>          &lt;dirName&gt;web&lt;/dirName&gt;</p>
<p>        &lt;/beanSpec&gt;</p>
<p>      &lt;specs&gt;</p>
<p>    &lt;configuration&gt;</p>
<p>  &lt;plugin&gt;</p>
<section>      Additional bean specifications can be specified by adding
additional beanSpec entries to the plugin configuration.</section>
<section>Step by Step Example</section>
<section>The following steps will create a simple "hello world!" task
from within eclipse:</section>
<section>1. If you have not already done so, follow the steps described
in Eclipse Integration to import the process module into your eclipse
environment.</section>
<section>2. Within eclipse, select the <ph>org.dwfa.bpa.tasks.dialog</ph>
package. Right click on this package, and select New &gt; Class. Name
the new class HelloWorldDialog, and set the Superclass to be <ph>org.dwfa.bpa.tasks.AbstractTask</ph>,
and select the checkbox labeled "Inherited abstract methods". Now commit
this dialog, and create the class.</section>
<section>3. Change the method:</section>
<p>       public int[] getDataContainerIds() {</p>
<p>       // TODO Auto-generated method stub</p>
<p>       return null;</p>
<p>       }</p>
<p>      to the following:</p>
<p>       public int[] getDataContainerIds() {</p>
<p>       return new int[] {};</p>
<p>       }</p>
<section>      This method will be deprecated in future versions of the
architecture.</section>
<section>4. Change the method:</section>
<p>       public Collection&lt;Condition&gt; getConditions() {</p>
<p>       // TODO Auto-generated method stub</p>
<p>       return null;</p>
<p>       }</p>
<section>      to the following:</section>
<p>       public Collection&lt;Condition&gt; getConditions() {</p>
<p>       return CONTINUE_CONDITION;</p>
<p>       }</p>
<section>This method defines the possible valid exit conditions for this
task. In this case, we just want the environment to continue with the
next task after exe­cuting this task, hence the CONTINUE_CONDITION specification.
Other tasks may allow for branching conditions, or other exit conditions,
and may define a different collection of exit conditions.</section>
<section>5. Add the following fields and methods to control the serialization
of this task:</section>
<p>private static final long serialVersionUID = 1;</p>
<p>private static final int dataVersion = 1;</p>
<p>private void writeObject(ObjectOutputStream out) throws</p>
<p>                         IOException {</p>
<p>       out.writeInt(dataVersion);</p>
<p>}</p>
<p>private void readObject(java.io.ObjectInputStream in)</p>
<p>           throws IOException, ClassNotFoundException {</p>
<p>    int objDataVersion = in.readInt();</p>
<p>    if (objDataVersion == 1) {</p>
<p>          //all is well :-)</p>
<p>    } else {</p>
<p>       throw new IOException("Can't handle dataversion:</p>
<p>                             " + objDataVersion);</p>
<p>    }</p>
<p>}</p>
<section> Although this task is very simple, other tasks may have more
complicated data structures which are set at design time using standard
JavaBean editing conventions. By implementing the serialization methods,
and by explicitly defining the serialVersionUID and dataVersion, we are
providing a founda­tion for supporting task evolution over time.</section>
<section>   6. Change this method:</section>
<section>public Condition evaluate(I_EncodeBusinessProcess process,</section>
<section>                          I_Work worker)</section>
<section>           throws TaskFailedException {</section>
<p>  // TODO Auto-generated method stub</p>
<p>  return null;</p>
<p>}</p>
<section>      to the following:</section>
<p>public Condition evaluate(I_EncodeBusinessProcess pro­cess,</p>
<p>            I_Work worker) throws TaskFailedException {</p>
<p>    JOptionPane.showMessageDialog(new JFrame(), "Hello World!");</p>
<p>    return Condition.CONTINUE;</p>
<p>}</p>
<section>The task is now fully functional. To use the task from within
the Process Builder, (see the Clinic Demonstration for an introduction
to runing the bundled environment, and the Process Builder), we must
create a BeanInfo class for this task.</section>
<section> 7. Create the BeanInfo class by extending java.beans.SimpleBeanInfo.
Within eclipse, select the org.dwfa.bpa.tasks.dialog package. Right click
on this package, and select New &gt; Class. Name the new class HelloWorldDia­logBeanInfo,
and set the Superclass to be java.beans.SimpleBeanInfo. Now commit this
dialog, and create the class.</section>
<section>   8. Add the following method to this class:</section>
<p>public BeanDescriptor getBeanDescriptor() {</p>
<p>   BeanDescriptor bd =</p>
<p>              newBeanDescriptor( HelloWorldDialog.class);</p>
<p>   bd.setDisplayName("&lt;html&gt;&lt;font color='green'&gt;</p>
<p>                      &lt;center&gt; Hello World");</p>
<p>   return bd;</p>
<p>}</p>
<section>Now that the Task has a BeanInfo class to describe it, it can
be made avail­able to the process builder by writing the task bean to
disk.  This step is managed by adding an entry to the Maven pom.xml file
as follows.</section>
<section>   9. Open the process pom.xml file from within eclipse, and
add the follow­ing entry below the entry for org.dwfa.bpa.tasks.dialog.ShowInfoDialog
(you can use eclipse to search the file to find this entry):</section>
<p> &lt;beanSpec&gt;</p>
<p>    &lt;sourceName&gt;</p>
<p>       org.dwfa.bpa.tasks.dialog.HelloWorldDialog</p>
<p>    &lt;/sourceName&gt;</p>
<p>    &lt;dirName&gt;dialog&lt;/dirName&gt;</p>
<p> &lt;/beanSpec&gt;</p>
<section>  10. Generate a new "bundle" using maven by navigating to the
dev/bundle directory and executing either mkbundle.sh (unix) or mkbundle.bat
(win­dows). This command causes all the modules to be built, and bundled
in a directory. This directory will be located inside the dev/bundle/target/dwfa-bundle.dir/dwfa
when the build is complete. Go stretch for awhile :-) It takes 40 minutes
to do this complete bundle build on our development machines.</section>
<section>  11. Once the bundle build is complete, you can execute the
resulting bun­dle by executing the startClinic.sh (unix) or startClinic.bat
(windows) file located inside of the dev/bundle/target/dwfa-bundle.dir/dwfa
directory.</section>
<section>  12. After launching the clinic bundle, you should be able
to locate the new task from within the Process Builder by selecting the
"dialog" folder in the upper left panel of the window, and the new task
should be displayed in the lower left panel, and can be dragged onto
the process panel on the right.</section>

</body>
</topic>
</dita>
