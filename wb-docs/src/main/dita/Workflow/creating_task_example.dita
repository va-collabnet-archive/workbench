<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
  "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="topic3" xml:lang="en">
    <title>Example: Create a Task</title>
    <taskbody>
        <context>The following steps will create a simple "hello world!" task from within
            eclipse:</context>
        <steps>
            <step>
                <cmd>If you have not already done so, follow the steps described in Eclipse
                    Integration to import the process module into your eclipse environment.</cmd>
            </step>
            <step>
                <cmd> Within eclipse, select the <ph>org.dwfa.bpa.tasks.dialog</ph> package. Right
                    click on this package, and select New &gt; Class. Name the new class
                    HelloWorldDialog, and set the Superclass to be
                        <ph>org.dwfa.bpa.tasks.AbstractTask</ph>, and select the checkbox labeled
                    "Inherited abstract methods". Now commit this dialog, and create the
                    class.</cmd>
            </step>
            <step>
                <cmd>3. Change the method:</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph> public int[] getDataContainerIds() {</codeph>
                        <codeph> // TODO Auto-generated method stub</codeph>
                        <codeph> return null;</codeph>
                        <codeph> }</codeph>
                        <codeph> to the following:</codeph>
                        <codeph> public int[] getDataContainerIds() {</codeph>
                        <codeph> return new int[] {};</codeph>
                        <codeph> }</codeph>
                    </codeblock>
                </stepxmp>
                <info> This method will be deprecated in future versions of the architecture.</info>
            </step>
            <step>
                <cmd>4. Change the method:</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph> public Collection&lt;Condition&gt; getConditions()
                            {</codeph>
                        <codeph> // TODO Auto-generated method stub</codeph>
                        <codeph> return null;</codeph>
                        <codeph> }</codeph>
                    </codeblock>
                </stepxmp>
                <info> to the following:</info>
                <stepxmp>
                    <codeblock>
                        <codeph> public Collection&lt;Condition&gt; getConditions()
                            {</codeph>
                        <codeph> return CONTINUE_CONDITION;</codeph>
                        <codeph> }</codeph>
                    </codeblock>
                </stepxmp>
                <info>This method defines the possible valid exit conditions for this task. In this
                    case, we just want the environment to continue with the next task after
                    executing this task, hence the CONTINUE_CONDITION specification. Other tasks may
                    allow for branching conditions, or other exit conditions, and may define a
                    different collection of exit conditions.</info>
            </step>
            <step>
                <cmd>5. Add the following fields and methods to control the serialization of this
                    task:</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph>private static final long serialVersionUID = 1;</codeph>
                        <codeph>private static final int dataVersion = 1;</codeph>
                        <codeph>private void writeObject(ObjectOutputStream out) throws</codeph>
                        <codeph> IOException {</codeph>
                        <codeph> out.writeInt(dataVersion);</codeph>
                        <codeph>}</codeph>
                        <codeph>private void readObject(java.io.ObjectInputStream in)</codeph>
                        <codeph> throws IOException, ClassNotFoundException {</codeph>
                        <codeph> int objDataVersion = in.readInt();</codeph>
                        <codeph> if (objDataVersion == 1) {</codeph>
                        <codeph> //all is well :-)</codeph>
                        <codeph> } else {</codeph>
                        <codeph> throw new IOException("Can't handle dataversion:</codeph>
                        <codeph> " + objDataVersion);</codeph>
                        <codeph> }</codeph>
                        <codeph>}</codeph>
                    </codeblock>
                </stepxmp>
                <info> Although this task is very simple, other tasks may have more complicated data
                    structures which are set at design time using standard JavaBean editing
                    conventions. By implementing the serialization methods, and by explicitly
                    defining the serialVersionUID and dataVersion, we are providing a foundation for
                    supporting task evolution over time.</info>
            </step>
            <step>
                <cmd> 6. Change this method:</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph>public Condition evaluate(I_EncodeBusinessProcess process,</codeph>
                        <codeph> I_Work worker)</codeph>
                        <codeph> throws TaskFailedException {</codeph>

                        <codeph> // TODO Auto-generated method stub</codeph>
                        <codeph> return null;</codeph>
                        <codeph>}</codeph>
                    </codeblock>
                </stepxmp>
                <info> to the following:</info>
                <stepxmp>
                    <codeblock>
                        <codeph>public Condition evaluate(I_EncodeBusinessProcess process,</codeph>
                        <codeph> I_Work worker) throws TaskFailedException {</codeph>
                        <codeph> JOptionPane.showMessageDialog(new JFrame(), "Hello
                            World!");</codeph>
                        <codeph> return Condition.CONTINUE;</codeph>
                        <codeph>}</codeph>
                    </codeblock>
                </stepxmp>

                <stepresult>The task is now fully functional. To use the task from within the
                    Process Builder, (see the Clinic Demonstration for an introduction to runing the
                    bundled environment, and the Process Builder), we must create a BeanInfo class
                    for this task.</stepresult>
            </step>
            <step>
                <cmd> Create the BeanInfo class by extending java.beans.SimpleBeanInfo. Within
                    eclipse, select the org.dwfa.bpa.tasks.dialog package. Right click on this
                    package, and select New &gt; Class. Name the new class
                    HelloWorldDialogBeanInfo, and set the Superclass to be
                    java.beans.SimpleBeanInfo. Now commit this dialog, and create the class.</cmd>
            </step>

            <step>
                <cmd> 8. Add the following method to this class:</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph>public BeanDescriptor getBeanDescriptor() {</codeph>
                        <codeph> BeanDescriptor bd =</codeph>
                        <codeph> newBeanDescriptor( HelloWorldDialog.class);</codeph>
                        <codeph> bd.setDisplayName("&lt;html&gt;&lt;font
                            color='green'&gt;</codeph>
                        <codeph> &lt;center&gt; Hello World");</codeph>
                        <codeph> return bd;</codeph>
                        <codeph>}</codeph>
                    </codeblock>
                </stepxmp>
                <stepresult>
                    <ph>Now that the Task has a BeanInfo class to describe it, it can be made
                        available to the process builder by writing the task bean to disk. This step
                        is managed by adding an entry to the Maven pom.xml file as follows.</ph>
                </stepresult>
            </step>


            <step>
                <cmd> 9. Open the process pom.xml file from within eclipse, and add the following
                    entry below the entry for
                        <codeph>org.dwfa.bpa.tasks.dialog.ShowInfoDialog</codeph> (you can use
                    eclipse to search the file to find this entry):</cmd>
                <stepxmp>
                    <codeblock>
                        <codeph> &lt;beanSpec&gt;</codeph>
                        <codeph> &lt;sourceName&gt;</codeph>
                        <codeph> org.dwfa.bpa.tasks.dialog.HelloWorldDialog</codeph>
                        <codeph> &lt;/sourceName&gt;</codeph>
                        <codeph> &lt;dirName&gt;dialog&lt;/dirName&gt;</codeph>
                        <codeph> &lt;/beanSpec&gt;</codeph>
                    </codeblock>
                </stepxmp>
            </step>
            <step>
                <cmd> 10. Generate a new "bundle" using maven by navigating to the dev/bundle
                    directory and executing either mkbundle.sh (unix) or mkbundle.bat (windows).
                    This command causes all the modules to be built, and bundled in a directory.
                    This directory will be located inside the dev/bundle/target/dwfa-bundle.dir/dwfa
                    when the build is complete. Go stretch for awhile :-) It takes 40 minutes to do
                    this complete bundle build on our development machines.</cmd>
            </step>
            <step>
                <cmd> 11. Once the bundle build is complete, you can execute the resulting bundle by
                    executing the startClinic.sh (unix) or startClinic.bat (windows) file located
                    inside of the dev/bundle/target/dwfa-bundle.dir/dwfa directory.</cmd>
            </step>
            <step>
                <cmd> 12. After launching the clinic bundle, you should be able to locate the new
                    task from within the Process Builder by selecting the "dialog" folder in the
                    upper left panel of the window, and the new task should be displayed in the
                    lower left panel, and can be dragged onto the process panel on the right.</cmd>
            </step>
        </steps>
    </taskbody>
</task>
