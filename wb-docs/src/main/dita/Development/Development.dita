<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA 1.1 Composite//EN"
  "http://docs.oasis-open.org/dita/v1.1/OS/dtd/ditabase.dtd">
<dita>
<!-- generated by DCL filter dwhtm, Ver 3.3 m206 h286 -->

<topic id="topic1" xml:lang="en">
<title>The IHTSDO Workbench Development Environment</title>
<body>
<section>This chapter is aimed at those software developers who intend to progra­matically
extend an IHTSDO Workbench IDE ( e.g. editor of viewer ). Those considering
to do so should be both proficient in the java program­ming language,
and be well versed with the exisitng concepts and function­ality described
in this manual. Experience with automatic software build processes in
a collaborative environment would also stand the prospective developer
in good stead. This, and the following chapters which constitute the
Developers Guide, are only intended to be sufficient in detail to guide
prospective developers, rather than be a comprehensive developers’
resource. Those wishing to embark on extending the functionality of IHTSDO
Workbench are advised to peruse the available source code and discuss
their proposed changes or enhancements with those in the interna­tional
community who have trodden a similar path before them.</section>
</body>
</topic>

<topic id="topic2" xml:lang="en">
<title>Extending the IHTSDO Workbench IDE programatically</title>
<body>
<section><xref
 href="https://dwfa.aceworkspace.net/" scope="external" format="html">The
IHTSDO Toolkit is based on a predominantly open source infrastruc­ture
and built for maximum configuration and customisation by users, to suit
their needs and to enable collaborative development of terminologies.
Other features of this tooling environment are that it can be adapted,
extended, enhanced, and that features and functionality available to
users can be re-used, and re-purposed, without having to rely upon vendor
capac­ity, service level agreements, or  business development priorities
and inter­ests.</xref></section>
<section id="at1003567">Although software developers may have their own
preferred development methodologies and environments, the approach covered
here has evolved and been refined to optimise productivity  and  distributed
development across different operating systems. The key technologies
employed are Java; JINI; Eclipse; Maven; Subversion; a versioned object database
built on Berkeley DB; install4j; and the IHTSDO Workspace and Maven internet repositories.
<indexterm>JINI
</indexterm><indexterm>install4j
</indexterm></section>
</body>
</topic>

<topic id="topic3" xml:lang="en">
<title>Key Concepts</title>
<body>
<section><ph>Bundle</ph>: a collection of artefacts associated or “bundled”
together for a sin­gle purpose – distribution and installation on
customers' desktops. Bundle can also be used as a verb.</section>
<section><ph>Package</ph>: a collection of  associated artefacts “packaged”
into a single <i>jar</i><fn id="at1057199"><ph>J</ph>ava <ph>Ar</ph>chive
– a single archive file format from Sun Microsystem's Java initiative.
Sim­ilar to a zip or other archiving technology. Jar files contain a
<i>MANIFEST</i> section of metadata about the archive. </fn><xref
href="#topic3/at1057199" scope="local" type="fn" format="dita"></xref><i>
</i>file for version management purposes.</section>
<section id="at1003629"><ph>module</ph>: [Maven concept]<indexterm>Maven
</indexterm></section>
<section id="at1003644"><ph>project</ph>: [Maven concept] is the smallest unit of software that is built
and packaged as a single artefact, with its own build instructions, using
Maven. The build rules for the project are represented in
the project's POM, and contain all of the project's goals and dependencies.<indexterm>Maven
</indexterm><indexterm>Maven
</indexterm><indexterm>POM
</indexterm></section>
<section id="at1003663"><ph>POM</ph>: [Maven Concept] Maven's Project Object Model file – an XML for­matted
file containing a project's definition in terms of goals, dependencies
and build rules.<indexterm>POM
</indexterm><indexterm>Maven
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003683"><ph>dependency</ph>: [Maven concept]<indexterm>dependency
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003698"><ph>goal</ph>: [Maven concept]<indexterm>goal
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003714"><ph>repository</ph>: [concept used by both Maven and Subversion]. A persistent store for holding various sorts
of artefacts in a contolled fashion. It supports multiple users, version management, web access. A subversion repository on
Collabnet<fn id="at1057225"><xref
 href="http://www.collab.net" scope="external" format="html"><ph>http://www.collab.net</ph></xref>
 </fn><xref href="#topic3/at1057225" scope="local" type="fn" format="dita"></xref>
may be used for storing source code for developers of  IHTSDO Workbench
IDE components and Maven plugins. A Subversion repository may also be
also used by terminology modellers for storing ter­minology changesets
and change history from their IHTSDO Workbench profiles. Maven repositories
are used to hold built components (jar files) that are used for constructing
executable IHTSDO Workbench IDE bun­dles, replete with  SNOMED and/or
other terminology sets within a single database.<indexterm>repository
</indexterm><indexterm>Maven
</indexterm><indexterm>Subversion
</indexterm><indexterm>version
</indexterm></section>
<section id="at1003734"><ph>deploy</ph>: [Maven concept] The action of transferring a project's built
artefacts from a developer's local Maven repository into a remote master repository.<indexterm>deploy
</indexterm><indexterm>Maven
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003751"><ph>install</ph>: [Maven concept] A project goal which, when executed, places
a built project artefact into the user's local<xref
 href="https://ed-sct-bundle.aceworkspace.net/" scope="external" format="html">
maven repository. Maven checks all project dependencies and, if required, 
will automatically download or build relevant components of the project.</xref><indexterm>install
</indexterm><indexterm>Maven
</indexterm><indexterm>maven
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003772"><ph>Snapshot</ph>: [Maven concept]  Unlike stable releases, which are deemed
immutable and stay in one or more Maven repositories until no longer sup­ported, <ph>snapshots</ph>
can  change daily, or even hourly to reflect developer's changes.<indexterm>Snapshot
</indexterm><indexterm>Maven
</indexterm><indexterm>Maven
</indexterm></section>
<section id="at1003793"><ph>Continuous Integration</ph>: When a team of developers is
working on a project, the contributions of each member can conflict with
those of the others on the team.  By frequently integrating and testing
individuals' changes into a single system, the risk of divergent or conflicting
change is minimised. Organisations can use the  IHTSDO Workbench Continuum<fn
id="at1057262"><xref
 href="http://continuum.apache.org/" scope="external" format="html"><ph>http://continuum.apache.org</ph></xref></fn><xref
href="#topic3/at1057262" scope="local" type="fn" format="dita"></xref>
server to drive Maven builds after source code changes have been committed
to the IHTSDO workspace.<indexterm>Continuous Integration
</indexterm></section>
</body>
</topic>

<topic id="topic4" xml:lang="en">
<title>Development Principles</title>
<body>
<section>This section articulates the key principles underpinning the  terminology
development environment. The development environment comprises the hardware
and software infrastructure as well as aspects of the rendering of a
terminology development organisation's business processes using this
infra­structure.</section>
<ul>
<li>Continuous Integration</li>
<li>Automatic Builds</li>
<li>software and hardware</li>
</ul>
</body>
</topic>

<topic id="topic5" xml:lang="en">
<title>The Terminology Modeller's Environment</title>
<body>
<section id="at1003939">Terminology modellers need access to various
versions of a given terminol­ogy. They need tools that support
the importation of termsets, the automatic correlation of a given term
in there termset of interest to SNOMED or other target terminology. They
 need the ability to edit the descriptions associated with a given concept,
the relationships to other concepts, the ability to dep­recate terms,
and a host of other functions that the IHTSDO Workbench editor is capable,
or might be capable of providing.  A simplified view of the modeller's
environment is illustrated in Figure 172, “IHTSDO Work­bench Terminology
Modeller’s Environment”,  below. It is important to note that the
environment is distributed in both time and space, with mod­eller's
having the ability to work offline and to synchronise there changes with
those of others through a master repository that holds changesets. Each
modeller's changeset is timestamped and identified as belonging to that
modeller. This allows for changes to be uploaded in chunks appropriate
to the work practices of them modeller, and for changes to be rolled
back if required. It also supports the important principle of dual independent
mod­elling which helps to improve the quality of a terminology.<indexterm>version
</indexterm></section>
<fig id="at1004088">
<title>IHTSDO Workbench Terminology Modeller’s Environment</title>
<image href="../images/Developement_Images/development_img_5.jpg"
placement="break" width="459px" height="322px" />
</fig>
</body>
</topic>

<topic id="topic6" xml:lang="en">
<title>The Terminology Validator Role</title>
<body>
<section>The role of the validator is to analyse the potential updates and changes
devised by the terminology modeller(s) and resolve any conflicts that
have arisen as part of the Quality Assurance framework.  terminology
develop­ment is undertaken using a dual independent modelling approach,
whereby each target concept is modelled in SNOMED by two modellers working
independently. The change sets produced by the two modellers are then
compared and presented to the validator role. At the time of writing,
tool support for this process is still being developed.</section>
</body>
</topic>

<topic id="topic7" xml:lang="en">
<title>Setting up Eclipse for IHTSDO Workbench Development<ph><indexterm>Eclipse
<indexterm>setting up for developers</indexterm>
</indexterm></ph></title>
<body>
<section>The Eclipse IDE has been used extensively for programatically extending
the IHTSDO Worbench components. Eclipse is a cross-platform develop­ment
environment, particularly suited to java based applications and avail­able
from the Eclipse Foundation<fn id="at1074736"><xref
 href="http://www.eclipse.org" scope="external" format="html"><ph>http://www.eclipse.org</ph></xref></fn><xref
href="#topic7/at1074736" scope="local" type="fn" format="dita"></xref>.
Two particular Eclipse plugins that improve productivity for IHTSDO Workbench
development are the Maven 2 plugin and the Subversion plugin available
from Eclipse Plugin Central<fn id="at1074703"><xref
 href="http://www.eclipseplugincentral.com" scope="external" format="html"><ph>http://www.eclipseplugincentral.com</ph></xref></fn><xref
href="#topic7/at1074703" scope="local" type="fn" format="dita"></xref>.
</section>
<section id="at1074727">Once these plugins are installed, they will need
to be configured to support the connection to the IHTSDO workspace. For
subversion, this may require editing the <ph>servers</ph> file in the
developer’s subversion directory to support proxy connections, if required. For Maven, the <ph>settings.xml</ph> file in the  developer’s local maven
repository will need configuring to support authen­tication to the IHTSDO
Worskpace repository.<indexterm>proxy
</indexterm><indexterm>Maven
</indexterm><indexterm>settings.xml
</indexterm></section>
<section>An overview of components involved in the distributed development
of the IHTSDO toolkit is illustrated in <xref
 href="#topic7/at1074348" type="fig" format="dita"></xref></section>
<fig id="at1074348">
<title>The Developer's Environment for extending IHTSDO Workbench products</title>
<image href="../images/Developement_Images/development_img_8.jpg"
placement="break" width="503px" height="293px" />
</fig>
<section>The next chapter <xref
 href="Workspace.dita#topic1" type="topic" format="dita"></xref>, explains the pivotal role of the IHTSDO Workspace
in the distributed development environment for extending IHTSDO Workbench
funtionality.</section>

</body>
</topic>
</dita>
