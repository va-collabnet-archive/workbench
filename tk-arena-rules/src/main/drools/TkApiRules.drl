#created on: Aug 15, 2010
package org.ihtsdo.arena.drools

#list any import classes here.
import java.util.Map;

import org.ihtsdo.helper.dialect.DialectHelper;

import org.ihtsdo.tk.api.concept.ConceptVersionBI;
import org.ihtsdo.tk.api.description.DescriptionVersionBI;

import org.ihtsdo.tk.spec.DescriptionSpec;
import org.ihtsdo.tk.spec.SpecFactory;

import org.ihtsdo.tk.example.binding.Language;
import org.ihtsdo.tk.example.binding.Snomed;
import org.ihtsdo.tk.example.binding.SnomedConstraints;
import org.ihtsdo.tk.example.binding.SnomedRelType;
import org.ihtsdo.tk.example.binding.SnomedRelSpec;
import org.ihtsdo.tk.example.binding.Taxonomies;
import org.ihtsdo.tk.example.binding.WbDescType;



#declare any global variables here

global Map templates;

// Parameters for satisfiesConstraint: x = don't care, e = equals, k = kind of, r = regex

rule "isKindOf refset concept"
	
	when
		$c : ConceptVersionBI(
				this isKindOf Taxonomies.REFSET_AUX);
	then 
   		System.out.println("isKindOf refset concept found: \n" + $c.toString());
end

rule "not satisfies FINDING_SITE_OUT constraint"
	
	when
		$c : ConceptVersionBI(
				this isKindOf Snomed.FINDING_SITE,
				this not satisfiesConstraint[k,e,k] SnomedConstraints.FINDING_SITE_OUT);
	then 
   		System.out.println("concept failing FINDING_SITE_OUT constraint found: \n" + $c.toString());
   		templates.put(SnomedRelSpec.FINDING_SITE, $c.getNid());	
end

rule "FSN not satisfies desc constraint"
	
	when
		// fsn missing semantic tag, but fsn is present. 
		$c : ConceptVersionBI(this not satisfiesConstraint[x,e,r] SnomedConstraints.FS_SEMANTIC_TAG, 
							  this satisfiesConstraint[x,e,x] SnomedConstraints.FS_SEMANTIC_TAG);
	then 

		   for (DescriptionVersionBI $d : $c.getDescsActive(WbDescType.FULLY_SPECIFIED.getNid())) {
   		    	templates.put(new DescriptionSpec($d.getUUIDs(), #from c
   		    									  SpecFactory.get($c), 
   		    									  WbDescType.FULLY_SPECIFIED, 
   		    									  $d.getText() + " (ADD TAG)"), 
   		    									  $d.getNid());
		   } 	
		
   		System.out.println("concept failing FS_SEMANTIC_TAG constraint found: \n" + $c.toString());
end

rule "no FSN"
	
	when
		// fsn is not present. 
		$c : ConceptVersionBI(this not satisfiesConstraint[x,e,x] SnomedConstraints.FS_SEMANTIC_TAG);
	then 

		for (DescriptionVersionBI $d : $c.getDescsActive(WbDescType.PREFERRED.getNid())) {
   		    	templates.put(new DescriptionSpec($d.getUUIDs(), #from c
   		    									  SpecFactory.get($c), 
   		    									  WbDescType.FULLY_SPECIFIED, 
   		    									  $d.getText() + " (ADD TAG (NO FSN))"), 
   		    									  $c.getNid());
		} 	
   		System.out.println("concept failing FS_SEMANTIC_TAG constraint found: \n" + $c.toString());
end

rule "missing Dialect description EN_UK"
	
	when
		$c : ConceptVersionBI(this isMissingDescFor Language.EN_UK);
	then 
		for (DescriptionVersionBI $d : $c.getDescsActive()) {
         if (DialectHelper.isMissingDescForDialect($d,
              Language.EN_UK.get($c.getViewCoordinate()).getNid(), $c.getViewCoordinate())) {
   		    templates.put(DialectHelper.getDescriptionSpecForDialect($d,
               Language.EN_UK, $c.getViewCoordinate()), $c.getNid());
         }
		} 	
end

rule "missing Dialect description EN_US"
	
	when
		$c : ConceptVersionBI(this isMissingDescFor Language.EN_US);
	then 
		for (DescriptionVersionBI $d : $c.getDescsActive()) {
         if (DialectHelper.isMissingDescForDialect($d,
              Language.EN_US.get($c.getViewCoordinate()).getNid(), $c.getViewCoordinate())) {
   		    templates.put(DialectHelper.getDescriptionSpecForDialect($d,
               Language.EN_US, $c.getViewCoordinate()), $c.getNid());
         }
		} 	
end

rule "isKindOf refset concept and not satisfies FINDING_SITE_OUT constraint"
	
	when
		$c : ConceptVersionBI(this isKindOf Taxonomies.REFSET_AUX,
							  this not satisfiesConstraint[x,e,k] SnomedConstraints.FINDING_SITE_OUT);
	then 
   		System.out.println("isKindOf refset concept failing FINDING_SITE_OUT constraint found: \n" + $c.toString());
   		templates.put(SnomedRelSpec.FINDING_SITE, $c.getNid());
end


rule "isKindOf workbench auxiliary concept"
	
	when
		$c : ConceptVersionBI(this isKindOf Taxonomies.WB_AUX);
	then 
   		System.out.println("isKindOf workbench auxiliary concept found: \n" + $c.toString());
end

rule "isKindOf queue type concept"
	
	when
		$c : ConceptVersionBI(this isKindOf Taxonomies.QUEUE_TYPE);
	then 
   		System.out.println("isKindOf queue type concept found: \n" + $c.toString());
end

rule "isKindOf SNOMED concept"
	
	when
		$c : ConceptVersionBI(this isKindOf Taxonomies.SNOMED);
	then 
   		System.out.println("isKindOf SNOMED concept found: \n" + $c.toString());
end

rule "double spaces"
	
	when
		$c : ConceptVersionBI(this isKindOf Taxonomies.SNOMED);
		$d : DescriptionVersionBI(text matches ".*garbage to disable this rule match \\s\\s.*") from $c.descsActive
	then 
   		System.out.println("Double spaces found: \n" + $c.toString());
   		DescriptionSpec dSpec = SpecFactory.get($d);
   		dSpec.setDescText($d.getText().replace("  ", " "));
   		templates.put(dSpec, $c.getNid());
end
