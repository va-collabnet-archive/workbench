import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import net.jini.url.httpmd.HttpmdUtil;

import org.dwfa.jini.VHelp;

com.sun.jini.start {
   private static host = ConfigUtil.getHostAddress();
   private static jiniPort = org.dwfa.jini.ConfigUtil.getJiniPort();
   private static jiniPortUrlPart = org.dwfa.jini.ConfigUtil.getJiniPortUrlPart();

   private static jskCodebase = ConfigUtil.concat(new String[] { "http://", host, jiniPortUrlPart, VHelp.addDlVersion("jsk-dl")});
   private static jskMdURL = ConfigUtil.concat(new String[] { "httpmd://", host, jiniPortUrlPart,  VHelp.addDlVersion("jsk-dl"), ";sha=0"});
   private static jskCodebaseMd = HttpmdUtil.computeDigestCodebase("lib-dl", jskMdURL);

   private static JINI_CLASS_SERVER_Codebase = "";
   private static JINI_CLASS_SERVER_Policy = "config${/}classServer.policy";
   private static JINI_CLASS_SERVER_Classpath = VHelp.addLibVersion("tools");
   private static JINI_CLASS_SERVER_Class = "com.sun.jini.tool.ClassServer";
   private static JINI_CLASS_SERVER_Args = new String[] { "-port", jiniPort, "-dir", "lib-dl", "-verbose" };

   private static SERVICE_REGISTRAR_URL = ConfigUtil.concat(new String[] {"http://", host, jiniPortUrlPart, VHelp.addDlVersion("reggie-dl"), ""});
   private static SERVICE_REGISTRAR_Codebase = ConfigUtil.concat(new String[] {SERVICE_REGISTRAR_URL , " ", jskCodebase});
   private static SERVICE_REGISTRAR_Policy = "config${/}reggie.policy";
   private static SERVICE_REGISTRAR_Classpath = VHelp.addLibVersion("reggie");
   private static SERVICE_REGISTRAR_Class = "com.sun.jini.reggie.TransientRegistrarImpl";
   private static SERVICE_REGISTRAR_Args = new String[] { "config${/}reggie.config" };

   private static TRANSACTION_AGGREGATOR_Codebase = "";
   private static TRANSACTION_AGGREGATOR_Policy = "config${/}transactionAggregator.policy";
   private static TRANSACTION_AGGREGATOR_Classpath = VHelp.addLibVersion("core");
   private static TRANSACTION_AGGREGATOR_Class = "org.dwfa.jini.TransactionParticipantAggregator";
   private static TRANSACTION_AGGREGATOR_Args = new String[] { "config${/}transactionAggregator.config" };

   private static TRANSACTION_MANAGER_URL = ConfigUtil.concat(new String[] {"http://", host, jiniPortUrlPart, VHelp.addDlVersion("mahalo-dl"), ""});
   private static TRANSACTION_MANAGER_Codebase = ConfigUtil.concat(new String[] {TRANSACTION_MANAGER_URL , " ", jskCodebase});
   private static TRANSACTION_MANAGER_Policy = "config${/}transactionManager.policy";
   private static TRANSACTION_MANAGER_Classpath = VHelp.addLibVersion("mahalo");
   private static TRANSACTION_MANAGER_Class = "com.sun.jini.mahalo.TransientMahaloImpl";
   private static TRANSACTION_MANAGER_Args = new String[] { "config${/}transactionManager.config" };

   private static MULTI_QUEUE_STARTER_Codebase = "";
   private static MULTI_QUEUE_STARTER_Policy = "config${/}multiQueueStarter.policy";
   private static MULTI_QUEUE_STARTER_Classpath = VHelp.addLibVersion("core");
   private static MULTI_QUEUE_STARTER_Class = "org.dwfa.queue.MultiQueueStarter";
   private static MULTI_QUEUE_STARTER_Args = new String[] { "config${/}multiQueueStarter.config" };

   private static LOG_SERVICE_URL = ConfigUtil.concat(new String[] {"http://", host, jiniPortUrlPart, VHelp.addDlVersion("log-dl"), ""});
   private static LOG_SERVICE_Codebase = ConfigUtil.concat(new String[] {LOG_SERVICE_URL , " ", jskCodebase});
   private static LOG_SERVICE_Policy = "config${/}logManagerService.policy";
   private static LOG_SERVICE_Classpath = VHelp.addLibVersion("core");
   private static LOG_SERVICE_Class = "org.dwfa.log.LogManagerService";
   private static LOG_SERVICE_Args = new String[] { "config${/}logManagerService.config" };

   private static LOG_VIEWER_NEW_FRAME_Codebase = "";
   private static LOG_VIEWER_NEW_FRAME_Policy = "config${/}newWindowGenerator.policy";
   private static LOG_VIEWER_NEW_FRAME_Classpath = VHelp.addLibVersion("core");
   private static LOG_VIEWER_NEW_FRAME_Class = "org.dwfa.bpa.util.NewWindowGenerator";
   private static LOG_VIEWER_NEW_FRAME_Args = new String[] { "config${/}newLogViewerFrame.config" };

   private static ACE_EDITOR_SERVICE_Codebase = "";
   private static ACE_EDITOR_SERVICE_Policy = "config${/}ace.policy";
   private static ACE_EDITOR_SERVICE_Classpath = VHelp.addLibVersion("core");
   private static ACE_EDITOR_SERVICE_Class = "org.dwfa.ace.config.AceRunner";
   private static ACE_EDITOR_SERVICE_Args = new String[] { "config${/}ace.config" };

   static serviceDescriptors = new ServiceDescriptor[] {
     new NonActivatableServiceDescriptor(JINI_CLASS_SERVER_Codebase,JINI_CLASS_SERVER_Policy,JINI_CLASS_SERVER_Classpath,JINI_CLASS_SERVER_Class,JINI_CLASS_SERVER_Args),
     new NonActivatableServiceDescriptor(SERVICE_REGISTRAR_Codebase,SERVICE_REGISTRAR_Policy,SERVICE_REGISTRAR_Classpath,SERVICE_REGISTRAR_Class,SERVICE_REGISTRAR_Args),
     new NonActivatableServiceDescriptor(TRANSACTION_AGGREGATOR_Codebase,TRANSACTION_AGGREGATOR_Policy,TRANSACTION_AGGREGATOR_Classpath,TRANSACTION_AGGREGATOR_Class,TRANSACTION_AGGREGATOR_Args),
     new NonActivatableServiceDescriptor(TRANSACTION_MANAGER_Codebase,TRANSACTION_MANAGER_Policy,TRANSACTION_MANAGER_Classpath,TRANSACTION_MANAGER_Class,TRANSACTION_MANAGER_Args),
     new NonActivatableServiceDescriptor(MULTI_QUEUE_STARTER_Codebase,MULTI_QUEUE_STARTER_Policy,MULTI_QUEUE_STARTER_Classpath,MULTI_QUEUE_STARTER_Class,MULTI_QUEUE_STARTER_Args),
     new NonActivatableServiceDescriptor(LOG_SERVICE_Codebase,LOG_SERVICE_Policy,LOG_SERVICE_Classpath,LOG_SERVICE_Class,LOG_SERVICE_Args),
     new NonActivatableServiceDescriptor(LOG_VIEWER_NEW_FRAME_Codebase,LOG_VIEWER_NEW_FRAME_Policy,LOG_VIEWER_NEW_FRAME_Classpath,LOG_VIEWER_NEW_FRAME_Class,LOG_VIEWER_NEW_FRAME_Args),
     new NonActivatableServiceDescriptor(ACE_EDITOR_SERVICE_Codebase,ACE_EDITOR_SERVICE_Policy,ACE_EDITOR_SERVICE_Classpath,ACE_EDITOR_SERVICE_Class,ACE_EDITOR_SERVICE_Args)
   };
}
