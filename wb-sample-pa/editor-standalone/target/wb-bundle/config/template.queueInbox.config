import org.dwfa.queue.DefaultQueueComparator;
import org.dwfa.queue.QueueWorkerSpec;
import org.dwfa.queue.bpa.worker.AllGroupsOutboxQueueWorker;
import org.dwfa.queue.bpa.worker.InboxQueueWorker;
import org.dwfa.queue.bpa.worker.HeadlessQueueWorker;
import org.dwfa.jini.ElectronicAddress;
import org.dwfa.bpa.process.I_SelectProcesses;
import org.dwfa.queue.SelectIfDeadlineOverdue;
import org.dwfa.queue.SelectAll;

import java.io.File;
import java.net.SocketPermission;
import java.security.Permission;
import java.util.UUID;

import net.jini.config.AbstractConfiguration;
import net.jini.core.entry.Entry;
import net.jini.discovery.LookupDiscovery;
import net.jini.id.Uuid;
import net.jini.id.UuidFactory;
import net.jini.lookup.entry.Name;
import net.jini.lookup.ServiceDiscoveryManager;
import net.jini.security.BasicProxyPreparer;

org.dwfa.queue.QueueServer {
    exporter = new net.jini.jeri.BasicJeriExporter(net.jini.jeri.tcp.TcpServerEndpoint.getInstance(0), new net.jini.jeri.BasicILFactory());
    objectGetter = new org.dwfa.queue.DefaultObjectInputStreamCreator();
    initialLookupGroups = new String[] { org.dwfa.jini.ConfigUtil.getUniqueJvmGroup() };
    
    entries = new Entry[] { org.dwfa.jini.TermEntry.getInboxQueueType(), new Name("**queueName**"), 
							new ElectronicAddress("**inboxAddress**") };
    workerSpecs = new QueueWorkerSpec[] { 
    //new QueueWorkerSpec(InboxQueueWorker.class, "Inbox POP worker", UUID.randomUUID(),
    //      new SelectAll()) 
     };
    nativeComparator = new DefaultQueueComparator();
    directory = new File("**directory**");
    nodeInboxAddress = new String("**nodeInboxAddress**");

    private groups = initialLookupGroups;
    discoveryManager = new LookupDiscovery(groups, this);
}

org.dwfa.queue.bpa.worker.InboxQueueWorker {
	tranDurLong = new Long(300000);
	mailPop3Host = "**mailPop3Host**";
	username = "**mailUsername**";
    
    initialLookupGroups = org.dwfa.queue.QueueServer.initialLookupGroups;


    private groups = initialLookupGroups;
    serviceDiscovery = new ServiceDiscoveryManager(
        new LookupDiscovery(groups, this), null, this);

    preparer =
	new BasicProxyPreparer(false,  new Permission[] {new SocketPermission("*:1024-", "connect") });
}


/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    registrarPreparer = new BasicProxyPreparer(
	false /* verify */,
	new Permission[] {
	    new SocketPermission("*:1024-", "connect")
	});

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the SDM */
net.jini.lookup.ServiceDiscoveryManager {

    registrarPreparer = net.jini.discovery.LookupDiscovery.registrarPreparer;

}//end net.jini.lookup.ServiceDiscoveryManager
