import com.sun.jini.config.ConfigUtil;
import com.sun.jini.config.KeyStores;
import com.sun.jini.reggie.RegistrarPermission;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.security.auth.callback.DialogCallbackHandler;
import java.io.File;
import java.security.Permission;
import java.util.Collections;
import javax.security.auth.login.LoginContext;
//import net.jini.constraint.*;
import net.jini.constraint.BasicMethodConstraints;
//import net.jini.core.constraint.*;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.entry.Entry;
import net.jini.core.lookup.ServiceTemplate;
import net.jini.discovery.LookupDiscovery;
import net.jini.id.Uuid;
import net.jini.id.UuidFactory;
//import net.jini.jeri.*;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;
//import net.jini.jeri.ssl.*;
import net.jini.jeri.ssl.SslServerEndpoint;
//import net.jini.jeri.tcp.*;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.jrmp.JrmpExporter;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Name;
import net.jini.lookup.ServiceDiscoveryManager;
//import net.jini.security.*;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;

com.sun.jini.reggie {
    minMaxServiceLease = 30000; //30 seconds
    unicastDiscoveryHost = ConfigUtil.getHostAddress();

    /* Reggie settings */
    initialMemberGroups   = new String[] { org.dwfa.jini.ConfigUtil.getUniqueJvmGroup() };

    /* JAAS login */
    loginContext = new LoginContext("com.sun.jini.Reggie");

    /* User information */

    private static users = 
	KeyStores.getKeyStore("file:prebuiltkeys/truststore", null);

    private static clientUser = Collections.singleton(
	KeyStores.getX500Principal("client", users));
    private static reggieUser = Collections.singleton(
	KeyStores.getX500Principal("reggie", users));

    /* Exporters */
    private serviceEndpoint = SslServerEndpoint.getInstance(0);
    private serviceConstraints = 
	new BasicMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[]{ Integrity.YES }, null
		)
	    );

    private serviceILFactory =
	new ProxyTrustILFactory(serviceConstraints,
                                RegistrarPermission.class);

    serverExporter = new BasicJeriExporter(serviceEndpoint, serviceILFactory);

    /* Proxy Preparers */
    private listenerPrincipals = 
	new InvocationConstraint[] {
	     new ServerMinPrincipal(clientUser)
            };

    private serviceListenerConstraints = 
	new BasicMethodConstraints(
	    new InvocationConstraints( 
		new InvocationConstraint[] {
		    Integrity.YES,
                    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(com.sun.jini.reggie.clientUser)
                    },
                null));

    listenerPreparer = 
	new BasicProxyPreparer(
	    true, 
            serviceListenerConstraints,
            new Permission[] { 
		new AuthenticationPermission(
		    reggieUser,
                    clientUser,
                    "connect")
		});
}//end com.sun.jini.reggie

/* Items used in multiple blocks below */
shared.entries {

    private serviceLookupConstraints = 
	new BasicMethodConstraints( 
	    new InvocationConstraints( 
		new InvocationConstraint[] { 
		    Integrity.YES,
		    ClientAuthentication.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(
			com.sun.jini.reggie.reggieUser) 
		    }, 
		null));

}//end shared.entries

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    registrarPreparer = 
	new BasicProxyPreparer( 
	    true,
	    shared.entries.serviceLookupConstraints,
	    new Permission[] { 
		new AuthenticationPermission(
		com.sun.jini.reggie.reggieUser,
		com.sun.jini.reggie.reggieUser,
		"connect") 
	    });

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the join manager */
net.jini.lookup.JoinManager {

    registrarPreparer    = net.jini.discovery.LookupDiscovery.registrarPreparer;
    registrationPreparer = net.jini.discovery.LookupDiscovery.registrarPreparer;
    serviceLeasePreparer = net.jini.discovery.LookupDiscovery.registrarPreparer;

}//end net.jini.lookup.JoinManager
