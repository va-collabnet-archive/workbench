package org.ihtsdo.arena.drools

#list any import classes here.
import java.util.Collection;

import org.ihtsdo.arena.conceptview.ConceptViewSettings;
import org.dwfa.ace.api.I_ConfigAceFrame;
import org.ihtsdo.tk.api.coordinate.ViewCoordinate;
import org.ihtsdo.tk.drools.facts.Context;
import org.ihtsdo.tk.drools.facts.DescFact;
import org.ihtsdo.tk.drools.facts.ViewFact;
import org.ihtsdo.tk.drools.facts.RelFact;
import org.ihtsdo.tk.drools.facts.View;
import org.ihtsdo.lang.LANG_CODE;
import org.ihtsdo.arena.context.action.NewLangPrefTermAction;
import org.ihtsdo.arena.context.action.NewLangSynonymAction;
import org.ihtsdo.tk.binding.snomed.RefsetAux;
import org.ihtsdo.arena.context.action.MakeAcceptableAction;
import org.ihtsdo.arena.context.action.MakePreferredAction;
import org.ihtsdo.tk.drools.RefexTypePairsForEvaluator;
import org.ihtsdo.arena.context.action.AddToNidFloatRefexAction;
import org.ihtsdo.tk.binding.snomed.Snomed;

#declare any global variables here

global Collection actions;
global ViewCoordinate vc;
global ConceptViewSettings cvSettings;
global I_ConfigAceFrame config;

#list any project specific rules for this file here

rule "create Danish preferred term"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: DescFact(context == Context.DROP_TARGET)
		$dropObject: DescFact(context == Context.DROP_OBJECT, component == $dropTarget.component)
	then
		actions.add(new NewLangPrefTermAction("create DA pref term", RefsetAux.DA_REFEX, LANG_CODE.DA, $dropTarget, config));
end

rule "create Danish synonym"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: DescFact(context == Context.DROP_TARGET)
		$dropObject: DescFact(context == Context.DROP_OBJECT, component == $dropTarget.component)
	then
		actions.add(new NewLangSynonymAction("create DA synonym", RefsetAux.DA_REFEX, LANG_CODE.DA, $dropTarget, config));
end

rule "DK make acceptable"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: DescFact(this isMemberOfWithType RefexTypePairsForEvaluator.DK_PREFERRED, 
							  context == Context.DROP_TARGET)
		$dropObject : DescFact(context == Context.DROP_OBJECT, component == $dropTarget.component);				   								   
	then
		actions.add(new MakeAcceptableAction("DA Acceptable", $dropTarget, LANG_CODE.DA, config));
end

rule "DK make preferred"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: DescFact(this isMemberOfWithType RefexTypePairsForEvaluator.DK_ACCEPTABLE, 
							  context == Context.DROP_TARGET)
		$dropObject : DescFact(context == Context.DROP_OBJECT, component == $dropTarget.component);					   								   
	then
		actions.add(new MakePreferredAction("DA Preferred", $dropTarget, LANG_CODE.DA, config));
end


rule "add to quantity"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: RelFact(context == Context.DROP_TARGET)
		$dropObject: RelFact(context == Context.DROP_OBJECT, component == $dropTarget.component)
	then
		actions.add(new AddToNidFloatRefexAction("add quantity", $dropTarget, Snomed.QUANTITY, config));
end

rule "add to concentration"
	when
                ViewFact(getView() == View.STATED)
		$dropTarget: RelFact(context == Context.DROP_TARGET)
		$dropObject: RelFact(context == Context.DROP_OBJECT, component == $dropTarget.component)
	then
		actions.add(new AddToNidFloatRefexAction("add concentration", $dropTarget, Snomed.CONCENTRATION, config));
end