/**
 * Copyright (c) 2009 International Health Terminology Standards Development
 * Organisation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ihtsdo.batch;

import java.io.IOException;
import java.util.List;
import java.util.UUID;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import org.dwfa.ace.ACE;
import org.dwfa.ace.api.I_AmTermComponent;
import org.dwfa.ace.api.I_IntSet;
import org.dwfa.ace.dnd.TerminologyTransferHandler;
import org.ihtsdo.batch.BatchActionEvent.BatchActionEventType;
import org.ihtsdo.batch.BatchActionTask.BatchActionTaskType;
import org.ihtsdo.tk.Ts;
import org.ihtsdo.tk.api.ComponentVersionBI;
import org.ihtsdo.tk.api.concept.ConceptVersionBI;
import org.ihtsdo.tk.api.coordinate.EditCoordinate;
import org.ihtsdo.tk.api.coordinate.ViewCoordinate;
import org.ihtsdo.tk.example.binding.TermAux;

/**
 *
 * @author marc
 */
public class BatchActionTaskParentAddNewUI extends javax.swing.JPanel implements I_BatchActionTask {

    BatchActionTask task;

    /** Creates new form BatchActionTaskParentAddNewUI */
    public BatchActionTaskParentAddNewUI() {
        initComponents();
        this.task = new BatchActionTaskParentAddNew();

        // Setup Linkage Types

        // Setup DnD Panel
        ValueDndConceptUI tmp = new ValueDndConceptUI("New Parent:");
        GroupLayout layout = (GroupLayout) this.getLayout();
        layout.replace(jPanelDndNewParent, tmp.getPanel());
        jPanelDndNewParent = tmp.getPanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxLinkage = new javax.swing.JComboBox();
        jPanelDndNewParent = new javax.swing.JPanel();

        jComboBoxLinkage.setModel(jComboBoxLinkage.getModel());
        jComboBoxLinkage.setRenderer(new org.ihtsdo.batch.JComboBoxExistingParentsRender());

        javax.swing.GroupLayout jPanelDndNewParentLayout = new javax.swing.GroupLayout(jPanelDndNewParent);
        jPanelDndNewParent.setLayout(jPanelDndNewParentLayout);
        jPanelDndNewParentLayout.setHorizontalGroup(
            jPanelDndNewParentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );
        jPanelDndNewParentLayout.setVerticalGroup(
            jPanelDndNewParentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBoxLinkage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanelDndNewParent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBoxLinkage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDndNewParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxLinkage;
    private javax.swing.JPanel jPanelDndNewParent;
    // End of variables declaration//GEN-END:variables

    @Override // I_BatchActionTask
    public JPanel getPanel() {
        return this;
    }

    @Override // I_BatchActionTask
    public void updateExisting(List<ComponentVersionBI> existingParents, List<ComponentVersionBI> existingRefsets, List<ComponentVersionBI> existingRoles, List<ComponentVersionBI> parentLinkages) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) jComboBoxLinkage.getModel();
        ComponentVersionBI selectedItem = (ComponentVersionBI) dcbm.getSelectedItem();

        dcbm.removeAllElements();
        for (ComponentVersionBI componentVersionBI : parentLinkages) {
            dcbm.addElement(componentVersionBI);
        }

                if (dcbm.getSize() == 0) {
            // empty list
        } else if (selectedItem == null) {
            // no prior selection
            dcbm.setSelectedItem(dcbm.getElementAt(0));
        } else {
            // Search by nid
            int selectedIdx = -1;
            for (int i = 0; i < dcbm.getSize(); i++) {
                ComponentVersionBI cvbi = (ComponentVersionBI) dcbm.getElementAt(i);
                if (cvbi.getNid() == selectedItem.getNid()) {
                    selectedIdx = i;
                    selectedItem = cvbi;
                    break;
                }
            }

            if (selectedIdx >= 0) {
                // prior selection exists in new list
                dcbm.setSelectedItem(selectedItem);
                jComboBoxLinkage.setSelectedIndex(selectedIdx);
            } else {
                // prior selection does not exist in new list
                dcbm.setSelectedItem(dcbm.getElementAt(0));
                jComboBoxLinkage.setSelectedIndex(0);
            }
        }
    }

    @Override // I_BatchActionTask
    public BatchActionTask getTask(EditCoordinate ec, ViewCoordinate vc) throws IOException {

        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) jComboBoxLinkage.getModel();
        ConceptVersionBI fromParentBI = (ConceptVersionBI) dcbm.getSelectedItem();
        UUID uuidIsa = fromParentBI.getPrimUuid();

        I_AmTermComponent termNewParent = ((ValueDndConceptUI) jPanelDndNewParent).getTermComponent();
        if (termNewParent != null && termNewParent.getUUIDs().size() > 0) {
            UUID uuidNewParent = termNewParent.getUUIDs().get(0);
            ((BatchActionTaskParentAddNew) task).setSelectedRoleTypeUuid(uuidIsa);
            ((BatchActionTaskParentAddNew) task).setSelectedDestUuid(uuidNewParent);
            return task;
        } else {
            BatchActionEventReporter.add(new BatchActionEvent(null, BatchActionTaskType.PARENT_ADD_NEW,
                    BatchActionEventType.TASK_INVALID, "value not set"));
            return null;
        }
    }
}
