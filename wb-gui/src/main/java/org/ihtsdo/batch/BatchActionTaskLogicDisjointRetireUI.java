/**
 * Copyright (c) 2009 International Health Terminology Standards Development Organisation
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */
package org.ihtsdo.batch;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import org.dwfa.ace.api.I_GetConceptData;
import org.dwfa.ace.api.Terms;
import org.dwfa.ace.api.ebr.I_ExtendByRef;
import org.dwfa.tapi.TerminologyException;
import org.ihtsdo.batch.BatchActionEvent.BatchActionEventType;
import org.ihtsdo.batch.BatchActionTask.BatchActionTaskType;
import org.ihtsdo.tk.Ts;
import org.ihtsdo.tk.api.ComponentVersionBI;
import org.ihtsdo.tk.api.ContradictionException;
import org.ihtsdo.tk.api.concept.ConceptChronicleBI;
import org.ihtsdo.tk.api.concept.ConceptVersionBI;
import org.ihtsdo.tk.api.coordinate.EditCoordinate;
import org.ihtsdo.tk.api.coordinate.ViewCoordinate;
import org.ihtsdo.tk.api.refex.RefexVersionBI;
import org.ihtsdo.tk.api.relationship.RelationshipVersionBI;
import org.ihtsdo.tk.binding.snomed.SnomedMetadataRfx;

/**
 *
 * @author marc
 */
public class BatchActionTaskLogicDisjointRetireUI extends javax.swing.JPanel implements I_BatchActionTask {

    BatchActionTask task;
    int jComboBoxExistingRefsetsIdxCache;

    /**
     * Creates new form BatchActionTaskLogicDisjoinRetireUI
     */
    public BatchActionTaskLogicDisjointRetireUI() {
        initComponents();

        // TASK
        this.task = new BatchActionTaskLogicDisjointRetire();

        // Existing Refsets Menu Setup
        jComboBoxExistingRefsetsIdxCache = jComboBoxExistingRefsets.getSelectedIndex();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxExistingRefsets = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(218, 80));

        jLabel1.setText("Disjoin:");

        jComboBoxExistingRefsets.setModel(jComboBoxExistingRefsets.getModel());
        jComboBoxExistingRefsets.setRenderer(new org.ihtsdo.batch.JComboBoxExistingRefsetsRender());
        jComboBoxExistingRefsets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExistingRefsetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxExistingRefsets, 0, 157, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jComboBoxExistingRefsets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxExistingRefsetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExistingRefsetsActionPerformed
        int idx = ((JComboBox) evt.getSource()).getSelectedIndex();
        if (idx >= 0) {
            jComboBoxExistingRefsetsIdxCache = idx;
        } else if (jComboBoxExistingRefsets.getItemCount() == 0) {
            jComboBoxExistingRefsetsIdxCache = -1;
        } else if (jComboBoxExistingRefsets.getItemCount() > jComboBoxExistingRefsetsIdxCache) {
            jComboBoxExistingRefsets.setSelectedIndex(jComboBoxExistingRefsetsIdxCache);
        } else {
            jComboBoxExistingRefsets.setSelectedIndex(0);
            jComboBoxExistingRefsetsIdxCache = 0;
        }
    }//GEN-LAST:event_jComboBoxExistingRefsetsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxExistingRefsets;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override // I_BatchActionTask
    public JPanel getPanel() {
        return this;
    }

    @Override // I_BatchActionTask
    public void updateExisting(List<RelationshipVersionBI> existingParents, List<ComponentVersionBI> existingRefsets, List<ComponentVersionBI> existingDescriptionRefsets, List<RelationshipVersionBI> existingRoles, List<ComponentVersionBI> parentLinkages) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) jComboBoxExistingRefsets.getModel();
        ComponentVersionBI selectedItem = (ComponentVersionBI) dcbm.getSelectedItem();

        // Sort existing parents by name.
        Comparator<ComponentVersionBI> cmp = new Comparator<ComponentVersionBI>() {

            @Override // Comparator
            public int compare(ComponentVersionBI o1, ComponentVersionBI o2) {
                return o1.toUserString().compareToIgnoreCase(o2.toUserString());
            }
        };

        // Add exitings parents to JComboBox model.
        Collections.sort(existingRefsets, cmp);
        dcbm.removeAllElements();
        for (ComponentVersionBI componentVersionBI : existingRefsets) {
            dcbm.addElement(componentVersionBI);
        }

        if (dcbm.getSize() == 0) {
            // empty list
        } else if (selectedItem == null) {
            // no prior selection
            dcbm.setSelectedItem(dcbm.getElementAt(0));
        } else {
            // Search by nid
            int selectedIdx = -1;
            for (int i = 0; i < dcbm.getSize(); i++) {
                ComponentVersionBI cvbi = (ComponentVersionBI) dcbm.getElementAt(i);
                if (cvbi.getNid() == selectedItem.getNid()) {
                    selectedIdx = i;
                    selectedItem = cvbi;
                    break;
                }
            }

            if (selectedIdx >= 0) {
                // prior selection exists in new list
                dcbm.setSelectedItem(selectedItem);
                jComboBoxExistingRefsets.setSelectedIndex(selectedIdx);
            } else {
                // prior selection does not exist in new list
                dcbm.setSelectedItem(dcbm.getElementAt(0));
                jComboBoxExistingRefsets.setSelectedIndex(0);
            }
        }
    }

    @Override // I_BatchActionTask
    public BatchActionTask getTask(EditCoordinate ec, ViewCoordinate vc, List<ConceptChronicleBI> concepts) throws Exception {
        // referenced component provided at execution time

        // SET REFSET EXITING COLLECTION NID
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) jComboBoxExistingRefsets.getModel();
        ComponentVersionBI refsetBI = (ComponentVersionBI) dcbm.getSelectedItem();
        if (refsetBI != null) {
            try {
                int refsetNid = refsetBI.getNid();
                Collection<? extends I_ExtendByRef> rsMembers =
                        Terms.get().getRefsetExtensionMembers(refsetNid);
                for (I_ExtendByRef member : rsMembers) {
                    I_GetConceptData mcb = Terms.get().getConcept(member.getComponentNid());
                    Collection<? extends RefexVersionBI<?>> mRefexes = mcb.getActiveRefexes(vc, refsetNid);
                    for (RefexVersionBI mrvbi : mRefexes) {
                        for (int editPath : ec.getEditPaths()) {
                            mrvbi.makeAnalog(SnomedMetadataRfx.getSTATUS_RETIRED_NID(),
                                    Long.MAX_VALUE,
                                    ec.getAuthorNid(), 
                                    ec.getModuleNid(),
                                    editPath);
                        }
                    }

                    Ts.get().addUncommitted(mcb);
                    ConceptVersionBI cvbi = Ts.get().getConceptVersion(vc, member.getComponentNid());
                    BatchActionEventReporter.add(new BatchActionEvent(cvbi,
                            BatchActionTaskType.LOGIC_DISJOINT_SET_RETIRE,
                            BatchActionEventType.EVENT_SUCCESS,
                            mcb.toUserString() + " retired membership in: "
                            + Ts.get().getComponent(refsetNid).toUserString()));
                }

                // RETIRE OVERALL REFSET CONCEPT
                ConceptVersionBI c = Ts.get().getConceptVersion(vc, refsetNid);
                for (int editPath : ec.getEditPaths()) {
                    if (c.getConceptAttributesActive() != null) {
                        c.getConceptAttributesActive().makeAnalog(
                                SnomedMetadataRfx.getSTATUS_RETIRED_NID(),
                                Long.MAX_VALUE,
                                ec.getAuthorNid(), 
                                ec.getModuleNid(),
                                editPath);
                    }
                }
                Collection<? extends RelationshipVersionBI> outrels = c.getRelationshipsOutgoingActive();
                for (RelationshipVersionBI r : outrels) {
                    for (int editPath : ec.getEditPaths()) {
                        r.makeAnalog(SnomedMetadataRfx.getSTATUS_RETIRED_NID(),
                                Long.MAX_VALUE,
                                ec.getAuthorNid(),
                                ec.getModuleNid(),
                                editPath);
                    }
                }
                Ts.get().addUncommitted(c);
                BatchActionEventReporter.add(new BatchActionEvent(c,
                        BatchActionTaskType.LOGIC_DISJOINT_SET_RETIRE,
                        BatchActionEventType.EVENT_SUCCESS,
                        "retired disjunction: "
                        + Ts.get().getComponent(refsetNid).toUserString()));

                // Task handles once for complete refset
                // ((BatchActionTaskLogicDisjoinRetire) task).setCollectionNid(refsetNid);
            } catch (IOException ex) {
                Logger.getLogger(BatchActionTaskLogicDisjointRetireUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ContradictionException ex) {
                Logger.getLogger(BatchActionTaskLogicDisjointRetireUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TerminologyException ex) {
                Logger.getLogger(BatchActionTaskLogicDisjointRetireUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            BatchActionEventReporter.add(new BatchActionEvent(null,
                    BatchActionTaskType.LOGIC_DISJOINT_SET_RETIRE,
                    BatchActionEventType.TASK_INVALID, "disjoint set retire failed"));
            return null;
        }

        return task;
    }

}
