/**
 * Copyright (c) 2009 International Health Terminology Standards Development
 * Organisation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ihtsdo.batch;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import org.ihtsdo.batch.BatchActionTask.BatchActionTaskType;
import org.ihtsdo.helper.descriptionlogic.DescriptionLogic;
import org.ihtsdo.tk.api.ComponentVersionBI;
import org.ihtsdo.tk.api.concept.ConceptChronicleBI;
import org.ihtsdo.tk.api.coordinate.EditCoordinate;
import org.ihtsdo.tk.api.coordinate.ViewCoordinate;
import org.ihtsdo.tk.api.relationship.RelationshipVersionBI;

/**
 *
 * @author marc
 */
public class BatchActionTaskBase extends javax.swing.JPanel {

    private BatchActionEditorPanel editor;
    private JPanel taskParentUI;

    public void setTaskParentUI(JPanel taskParentUI) {
        this.taskParentUI = taskParentUI;
    }
    private I_BatchActionTask taskDetailUI;
    private BatchActionTaskType actionTaskType;

    /** Creates new form BatchActionTaskBase */
    public BatchActionTaskBase(BatchActionEditorPanel batchActionEditorPanel) {
        this.editor = batchActionEditorPanel;

        initComponents();

        // INITIALIZE DEFAULT TASK
        this.taskDetailUI = new BatchActionTaskParentAddNewUI();
        this.actionTaskType = BatchActionTaskType.PARENT_ADD_NEW;

        // INITIALIZE DETAIL PANEL
        GroupLayout layout = (GroupLayout) this.getLayout();
        layout.replace(jPanelTaskDetail, taskDetailUI.getPanel());
        jPanelTaskDetail = taskDetailUI.getPanel();
        this.invalidate();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddTask = new javax.swing.JButton();
        btnDeleteTask = new javax.swing.JButton();
        jComboTaskType = new javax.swing.JComboBox();
        jPanelTaskDetail = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnAddTask.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add2.png"))); // NOI18N
        btnAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAddAnotherTask(evt);
            }
        });

        btnDeleteTask.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete2.png"))); // NOI18N
        btnDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionDeleteThisTask(evt);
            }
        });

        jComboTaskType.setModel(newBatchActionComboBoxModel());
        jComboTaskType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionSelectTaskType(evt);
            }
        });

        javax.swing.GroupLayout jPanelTaskDetailLayout = new javax.swing.GroupLayout(jPanelTaskDetail);
        jPanelTaskDetail.setLayout(jPanelTaskDetailLayout);
        jPanelTaskDetailLayout.setHorizontalGroup(
            jPanelTaskDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        jPanelTaskDetailLayout.setVerticalGroup(
            jPanelTaskDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnAddTask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteTask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboTaskType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanelTaskDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboTaskType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteTask)
                    .addComponent(btnAddTask))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTaskDetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionSelectTaskType(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionSelectTaskType
        int idx = ((JComboBox) evt.getSource()).getSelectedIndex();
        switch (idx) {
            case 0: // PARENT_ADD_NEW
                if (actionTaskType.compareTo(BatchActionTaskType.PARENT_ADD_NEW) != 0) {
                    actionTaskType = BatchActionTaskType.PARENT_ADD_NEW;
                    taskDetailUI = new BatchActionTaskParentAddNewUI();
                }
                break;
            case 1: // PARENT_REPLACE
                if (actionTaskType.compareTo(BatchActionTaskType.PARENT_REPLACE) != 0) {
                    actionTaskType = BatchActionTaskType.PARENT_REPLACE;
                    taskDetailUI = new BatchActionTaskParentReplaceUI();
                }
                break;
            case 2: // PARENT_RETIRE
                if (actionTaskType.compareTo(BatchActionTaskType.PARENT_RETIRE) != 0) {
                    actionTaskType = BatchActionTaskType.PARENT_RETIRE;
                    taskDetailUI = new BatchActionTaskParentRetireUI();
                }
                break;
            case 3: // REFSET_ADD_MEMBER
                if (actionTaskType.compareTo(BatchActionTaskType.REFSET_ADD_MEMBER) != 0) {
                    actionTaskType = BatchActionTaskType.REFSET_ADD_MEMBER;
                    taskDetailUI = new BatchActionTaskRefsetAddMemberUI();
                }
                break;
            case 4: // REFSET_MOVE_MEMBER
                if (actionTaskType.compareTo(BatchActionTaskType.REFSET_MOVE_MEMBER) != 0) {
                    actionTaskType = BatchActionTaskType.REFSET_MOVE_MEMBER;
                    taskDetailUI = new BatchActionTaskRefsetMoveMemberUI();
                }
                break;
            case 5: // REFSET_REPLACE_VALUE
                if (actionTaskType.compareTo(BatchActionTaskType.REFSET_REPLACE_VALUE) != 0) {
                    actionTaskType = BatchActionTaskType.REFSET_REPLACE_VALUE;
                    taskDetailUI = new BatchActionTaskRefsetReplaceValueUI();
                }
                break;
            case 6: // REFSET_RETIRE_MEMBER
                if (actionTaskType.compareTo(BatchActionTaskType.REFSET_RETIRE_MEMBER) != 0) {
                    actionTaskType = BatchActionTaskType.REFSET_RETIRE_MEMBER;
                    taskDetailUI = new BatchActionTaskRefsetRetireMemberUI();
                }
                break;
            case 7: // ROLE_ADD
                if (actionTaskType.compareTo(BatchActionTaskType.ROLE_ADD) != 0) {
                    actionTaskType = BatchActionTaskType.ROLE_ADD;
                    taskDetailUI = new BatchActionTaskRoleAddUI();
                }
                break;
            case 8: // ROLE_REPLACE_VALUE
                if (actionTaskType.compareTo(BatchActionTaskType.ROLE_REPLACE_VALUE) != 0) {
                    actionTaskType = BatchActionTaskType.ROLE_REPLACE_VALUE;
                    taskDetailUI = new BatchActionTaskRoleReplaceValueUI();
                }
                break;
            case 9: // ROLE_RETIRE
                if (actionTaskType.compareTo(BatchActionTaskType.ROLE_RETIRE) != 0) {
                    actionTaskType = BatchActionTaskType.ROLE_RETIRE;
                    taskDetailUI = new BatchActionTaskRoleRetireUI();
                }
                break;
            case 10: // LOGIC_DISJOINT_SET_ADD :SNOOWL:
                if (actionTaskType.compareTo(BatchActionTaskType.LOGIC_DISJOINT_SET_ADD) != 0) {
                    actionTaskType = BatchActionTaskType.LOGIC_DISJOINT_SET_ADD;
                    taskDetailUI = new BatchActionTaskLogicDisjointAddUI(editor.ace.aceFrameConfig);
                }
                break;
            case 11: // LOGIC_DISJOINT_SET_RETIRE :SNOOWL:
                if (actionTaskType.compareTo(BatchActionTaskType.LOGIC_DISJOINT_SET_RETIRE) != 0) {
                    actionTaskType = BatchActionTaskType.LOGIC_DISJOINT_SET_RETIRE;
                taskDetailUI = new BatchActionTaskLogicDisjointRetireUI();
                }
                break;
            case 12: // LOGIC_NEGATE_RELATIONSHIP_VALUE :SNOOWL:
                if (actionTaskType.compareTo(BatchActionTaskType.LOGIC_NEGATE_RELATIONSHIP_VALUE) != 0) {
                    actionTaskType = BatchActionTaskType.LOGIC_NEGATE_RELATIONSHIP_VALUE;
                    taskDetailUI = new BatchActionTaskLogicNegateRelValueUI();
                }
                break;
            case 13: // LOGIC_UNION_SET_CREATE :SNOOWL:
                if (actionTaskType.compareTo(BatchActionTaskType.LOGIC_UNION_SET_CREATE) != 0) {
                    actionTaskType = BatchActionTaskType.LOGIC_UNION_SET_CREATE;
                    taskDetailUI = new BatchActionTaskLogicUnionCreateUI(editor.ace.aceFrameConfig);
                }
                break;
            case 14: // LOGIC_UNION_SET_RETIRE :SNOOWL:
                if (actionTaskType.compareTo(BatchActionTaskType.LOGIC_UNION_SET_RETIRE) != 0) {
                    actionTaskType = BatchActionTaskType.LOGIC_UNION_SET_RETIRE;
                taskDetailUI = new BatchActionTaskLogicUnionRetireUI();
                }
                break;
            default:
                ; // NOTHING TO DO
        }

        // INITIALIZE DETAIL PANEL
        taskDetailUI.updateExisting(editor.getExistingParents(), editor.getExistingRefsets(),
                editor.getExistingRoles(), editor.getParentLinkages());
        GroupLayout layout = (GroupLayout) this.getLayout();
        layout.replace(jPanelTaskDetail, taskDetailUI.getPanel());
        jPanelTaskDetail = taskDetailUI.getPanel();

        this.invalidate();
        this.validate();
        this.doLayout();
        taskParentUI.invalidate();
        taskParentUI.validate();
        taskParentUI.doLayout();
    }//GEN-LAST:event_actionSelectTaskType

    private void actionAddAnotherTask(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAddAnotherTask
        editor.actionAddAnotherTask();
    }//GEN-LAST:event_actionAddAnotherTask

    private void actionDeleteThisTask(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionDeleteThisTask
        editor.actionDeleteTask(this);
    }//GEN-LAST:event_actionDeleteThisTask
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTask;
    private javax.swing.JButton btnDeleteTask;
    private javax.swing.JComboBox jComboTaskType;
    private javax.swing.JPanel jPanelTaskDetail;
    // End of variables declaration//GEN-END:variables

    BatchActionTask getTask(EditCoordinate ec, ViewCoordinate vc, List<ConceptChronicleBI> concepts) throws Exception {
        return taskDetailUI.getTask(ec, vc, concepts);
    }

    void updateExisting(List<RelationshipVersionBI> existingParents, List<ComponentVersionBI> existingRefsets,
            List<RelationshipVersionBI> existingRoles, List<ComponentVersionBI> parentLinkages) {
        taskDetailUI.updateExisting(existingParents, existingRefsets, existingRoles, parentLinkages);
    }

    private DefaultComboBoxModel newBatchActionComboBoxModel() {
        String[] sa;
        if (DescriptionLogic.isVisible()) {
            sa = new String[] { "Parent, Add New",
                "Parent, Replace",
                "Parent, Retire",
                "Refset, Add Member",
                "Refset, Move Member",
                "Refset, Replace Value",
                "Refset, Retire Member",
                "Role, Add",
                "Role, Replace Value",
                "Role, Retire",
                "Logic, Add Disjoint Set",
                "Logic, Retire Disjoint Set",
                "Logic, Negate Relationship Value",
                "Logic, Create Union Set",
                "Logic, Retire Union Set"
            };
        } else {
            sa = new String[] { "Parent, Add New",
                "Parent, Replace",
                "Parent, Retire",
                "Refset, Add Member",
                "Refset, Move Member",
                "Refset, Replace Value",
                "Refset, Retire Member",
                "Role, Add",
                "Role, Replace Value",
                "Role, Retire",
            };
        }


        return new javax.swing.DefaultComboBoxModel(sa);
    }

}
